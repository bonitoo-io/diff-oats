// This file is generated by [oats][0] and should not be edited by hand.
//
// [0]: https://github.com/influxdata/oats

export interface Error {
  readonly code:
    | 'internal error'
    | 'not found'
    | 'conflict'
    | 'invalid'
    | 'unprocessable entity'
    | 'empty value'
    | 'unavailable'
    | 'forbidden'
    | 'too many requests'
    | 'unauthorized'
    | 'method not allowed'
    | 'request too large'
    | 'unsupported media type'
  readonly message?: string
  readonly op?: string
  readonly err?: string
}

export interface Routes {
  authorizations?: string
  buckets?: string
  dashboards?: string
  external?: {
    statusFeed?: string
  }
  variables?: string
  me?: string
  flags?: string
  orgs?: string
  query?: {
    self?: string
    ast?: string
    analyze?: string
    suggestions?: string
  }
  setup?: string
  signin?: string
  signout?: string
  sources?: string
  system?: {
    metrics?: string
    debug?: string
    health?: string
  }
  tasks?: string
  telegrafs?: string
  users?: string
  write?: string
}

export interface DBRPs {
  content?: DBRP[]
}

export interface DBRP {
  readonly id: string
  orgID: string
  bucketID: string
  database: string
  retention_policy: string
  default: boolean
  virtual?: boolean
  links?: Links
}

export interface Links {
  next?: Link
  self: Link
  prev?: Link
}

export type Link = string

export interface DBRPCreate {
  orgID?: string
  org?: string
  bucketID: string
  database: string
  retention_policy: string
  default?: boolean
}

export interface DBRPGet {
  content?: DBRP
}

export interface DBRPUpdate {
  retention_policy?: string
  default?: boolean
}

export interface TelegrafPlugins {
  version?: string
  os?: string
  plugins?: TelegrafPlugin[]
}

export interface TelegrafPlugin {
  type?: string
  name?: string
  description?: string
  config?: string
}

export interface Telegrafs {
  configurations?: Telegraf[]
}

export type Telegraf = TelegrafRequest & {
  readonly id?: string
  readonly links?: {
    self?: Link
    labels?: Link
    members?: Link
    owners?: Link
  }
  readonly labels?: Labels
}

export interface TelegrafRequest {
  name?: string
  description?: string
  metadata?: {
    buckets?: string[]
  }
  config?: string
  orgID?: string
}

export type Labels = Label[]

export interface Label {
  readonly id?: string
  readonly orgID?: string
  name?: string
  properties?: any
}

export interface TelegrafPluginRequest {
  name?: string
  description?: string
  plugins?: Array<{
    type?: string
    name?: string
    alias?: string
    description?: string
    config?: string
  }>
  metadata?: {
    buckets?: string[]
  }
  config?: string
  orgID?: string
}

export interface LabelsResponse {
  labels?: Labels
  links?: Links
}

export interface LabelMapping {
  labelID?: string
}

export interface LabelResponse {
  label?: Label
  links?: Links
}

export interface ResourceMembers {
  links?: {
    self?: string
  }
  users?: ResourceMember[]
}

export type ResourceMember = UserResponse & {
  role?: 'member'
}

export interface UserResponse {
  readonly id?: string
  name: string
  status?: 'active' | 'inactive'
  readonly links?: {
    self?: string
  }
}

export interface AddResourceMemberRequestBody {
  id: string
  name?: string
}

export interface ResourceOwners {
  links?: {
    self?: string
  }
  users?: ResourceOwner[]
}

export type ResourceOwner = UserResponse & {
  role?: 'owner'
}

export interface LineProtocolError {
  readonly code:
    | 'internal error'
    | 'not found'
    | 'conflict'
    | 'invalid'
    | 'empty value'
    | 'unavailable'
  readonly message?: string
  readonly op?: string
  readonly err?: string
  readonly line?: number
}

export interface LineProtocolLengthError {
  readonly code: 'invalid'
  readonly message: string
}

export interface DeletePredicateRequest {
  start: string
  stop: string
  predicate?: string
}

export interface LabelCreateRequest {
  orgID: string
  name: string
  properties?: any
}

export interface LabelUpdate {
  name?: string
  properties?: any
}

export type Dashboard = CreateDashboardRequest & {
  links?: {
    self?: Link
    cells?: Link
    members?: Link
    owners?: Link
    labels?: Link
    org?: Link
  }
  readonly id?: string
  meta?: {
    createdAt?: string
    updatedAt?: string
  }
  cells?: Cells
  labels?: Labels
}

export interface CreateDashboardRequest {
  orgID: string
  name: string
  description?: string
}

export type Cells = Cell[]

export interface Cell {
  id?: string
  links?: {
    self?: string
    view?: string
  }
  x?: number
  y?: number
  w?: number
  h?: number
  viewID?: string
}

export type DashboardWithViewProperties = CreateDashboardRequest & {
  links?: {
    self?: Link
    cells?: Link
    members?: Link
    owners?: Link
    labels?: Link
    org?: Link
  }
  readonly id?: string
  meta?: {
    createdAt?: string
    updatedAt?: string
  }
  cells?: CellsWithViewProperties
  labels?: Labels
}

export type CellsWithViewProperties = CellWithViewProperties[]

export type CellWithViewProperties = Cell & {
  name?: string
  properties?: ViewProperties
}

export type ViewProperties =
  | LinePlusSingleStatProperties
  | XYViewProperties
  | SingleStatViewProperties
  | HistogramViewProperties
  | GaugeViewProperties
  | TableViewProperties
  | SimpleTableViewProperties
  | MarkdownViewProperties
  | CheckViewProperties
  | ScatterViewProperties
  | HeatmapViewProperties
  | MosaicViewProperties
  | BandViewProperties
  | GeoViewProperties

export interface LinePlusSingleStatProperties {
  adaptiveZoomHide?: boolean
  timeFormat?: string
  type: 'line-plus-single-stat'
  queries: DashboardQuery[]
  colors: DashboardColor[]
  shape: 'chronograf-v2'
  note: string
  showNoteWhenEmpty: boolean
  axes: Axes
  staticLegend?: StaticLegend
  xColumn?: string
  generateXAxisTicks?: string[]
  xTotalTicks?: number
  xTickStart?: number
  xTickStep?: number
  yColumn?: string
  generateYAxisTicks?: string[]
  yTotalTicks?: number
  yTickStart?: number
  yTickStep?: number
  shadeBelow?: boolean
  hoverDimension?: 'auto' | 'x' | 'y' | 'xy'
  position: 'overlaid' | 'stacked'
  prefix: string
  suffix: string
  decimalPlaces: DecimalPlaces
  legendColorizeRows?: boolean
  legendHide?: boolean
  legendOpacity?: number
  legendOrientationThreshold?: number
}

export interface DashboardQuery {
  text?: string
  editMode?: QueryEditMode
  name?: string
  builderConfig?: BuilderConfig
}

export type QueryEditMode = 'builder' | 'advanced'

export interface BuilderConfig {
  buckets?: string[]
  tags?: BuilderTagsType[]
  functions?: BuilderFunctionsType[]
  aggregateWindow?: {
    period?: string
    fillValues?: boolean
  }
}

export interface BuilderTagsType {
  key?: string
  values?: string[]
  aggregateFunctionType?: BuilderAggregateFunctionType
}

export type BuilderAggregateFunctionType = 'filter' | 'group'

export interface BuilderFunctionsType {
  name?: string
}

export interface DashboardColor {
  id: string
  type: 'min' | 'max' | 'threshold' | 'scale' | 'text' | 'background'
  hex: string
  name: string
  value: number
}

export interface Axes {
  x: Axis
  y: Axis
}

export interface Axis {
  bounds?: string[]
  label?: string
  prefix?: string
  suffix?: string
  base?: '' | '2' | '10'
  scale?: AxisScale
}

export type AxisScale = 'log' | 'linear'

export interface StaticLegend {
  colorizeRows?: boolean
  heightRatio?: number
  show?: boolean
  opacity?: number
  orientationThreshold?: number
  valueAxis?: string
  widthRatio?: number
}

export interface DecimalPlaces {
  isEnforced?: boolean
  digits?: number
}

export interface XYViewProperties {
  adaptiveZoomHide?: boolean
  timeFormat?: string
  type: 'xy'
  queries: DashboardQuery[]
  colors: DashboardColor[]
  colorMapping?: ColorMapping
  shape: 'chronograf-v2'
  note: string
  showNoteWhenEmpty: boolean
  axes: Axes
  staticLegend?: StaticLegend
  xColumn?: string
  generateXAxisTicks?: string[]
  xTotalTicks?: number
  xTickStart?: number
  xTickStep?: number
  yColumn?: string
  generateYAxisTicks?: string[]
  yTotalTicks?: number
  yTickStart?: number
  yTickStep?: number
  shadeBelow?: boolean
  hoverDimension?: 'auto' | 'x' | 'y' | 'xy'
  position: 'overlaid' | 'stacked'
  geom: XYGeom
  legendColorizeRows?: boolean
  legendHide?: boolean
  legendOpacity?: number
  legendOrientationThreshold?: number
}

export type ColorMapping = any

export type XYGeom =
  | 'line'
  | 'step'
  | 'stacked'
  | 'bar'
  | 'monotoneX'
  | 'stepBefore'
  | 'stepAfter'

export interface SingleStatViewProperties {
  type: 'single-stat'
  queries: DashboardQuery[]
  colors: DashboardColor[]
  shape: 'chronograf-v2'
  note: string
  showNoteWhenEmpty: boolean
  prefix: string
  tickPrefix: string
  suffix: string
  tickSuffix: string
  staticLegend?: StaticLegend
  decimalPlaces: DecimalPlaces
}

export interface HistogramViewProperties {
  type: 'histogram'
  queries: DashboardQuery[]
  colors: DashboardColor[]
  shape: 'chronograf-v2'
  note: string
  showNoteWhenEmpty: boolean
  xColumn: string
  fillColumns: string[]
  xDomain: number[]
  xAxisLabel: string
  position: 'overlaid' | 'stacked'
  binCount: number
  legendColorizeRows?: boolean
  legendHide?: boolean
  legendOpacity?: number
  legendOrientationThreshold?: number
}

export interface GaugeViewProperties {
  type: 'gauge'
  queries: DashboardQuery[]
  colors: DashboardColor[]
  shape: 'chronograf-v2'
  note: string
  showNoteWhenEmpty: boolean
  prefix: string
  tickPrefix: string
  suffix: string
  tickSuffix: string
  decimalPlaces: DecimalPlaces
}

export interface TableViewProperties {
  type: 'table'
  queries: DashboardQuery[]
  colors: DashboardColor[]
  shape: 'chronograf-v2'
  note: string
  showNoteWhenEmpty: boolean
  tableOptions: {
    verticalTimeAxis?: boolean
    sortBy?: RenamableField
    wrapping?: 'truncate' | 'wrap' | 'single-line'
    fixFirstColumn?: boolean
  }
  fieldOptions: RenamableField[]
  timeFormat: string
  decimalPlaces: DecimalPlaces
}

export interface RenamableField {
  readonly internalName?: string
  displayName?: string
  visible?: boolean
}

export interface SimpleTableViewProperties {
  type: 'simple-table'
  showAll: boolean
  queries: DashboardQuery[]
  shape: 'chronograf-v2'
  note: string
  showNoteWhenEmpty: boolean
}

export interface MarkdownViewProperties {
  type: 'markdown'
  shape: 'chronograf-v2'
  note: string
}

export interface CheckViewProperties {
  adaptiveZoomHide?: boolean
  type: 'check'
  shape: 'chronograf-v2'
  checkID: string
  check?: Check
  queries: DashboardQuery[]
  colors: DashboardColor[]
  legendColorizeRows?: boolean
  legendHide?: boolean
  legendOpacity?: number
  legendOrientationThreshold?: number
}

export type Check = CheckDiscriminator

export type CheckDiscriminator =
  | (DeadmanCheck & {type: string})
  | (ThresholdCheck & {type: string})
  | (CustomCheck & {type: string})

export type DeadmanCheck = CheckBase & {
  type: 'deadman'
  timeSince?: string
  staleTime?: string
  reportZero?: boolean
  level?: CheckStatusLevel
  every?: string
  offset?: string
  tags?: Array<{
    key?: string
    value?: string
  }>
  statusMessageTemplate?: string
}

export interface CheckBase {
  readonly id?: string
  name: string
  orgID: string
  taskID?: string
  readonly ownerID?: string
  readonly createdAt?: string
  readonly updatedAt?: string
  query: DashboardQuery
  status?: TaskStatusType
  description?: string
  readonly latestCompleted?: string
  readonly lastRunStatus?: 'failed' | 'success' | 'canceled'
  readonly lastRunError?: string
  labels?: Labels
  readonly links?: {
    self?: Link
    labels?: Link
    members?: Link
    owners?: Link
    query?: Link
  }
}

export type TaskStatusType = 'active' | 'inactive'

export type CheckStatusLevel = 'UNKNOWN' | 'OK' | 'INFO' | 'CRIT' | 'WARN'

export type ThresholdCheck = CheckBase & {
  type: 'threshold'
  thresholds?: Threshold[]
  every?: string
  offset?: string
  tags?: Array<{
    key?: string
    value?: string
  }>
  statusMessageTemplate?: string
}

export type Threshold =
  | (GreaterThreshold & {type: string})
  | (LesserThreshold & {type: string})
  | (RangeThreshold & {type: string})

export type GreaterThreshold = ThresholdBase & {
  type: 'greater'
  value: number
}

export interface ThresholdBase {
  level?: CheckStatusLevel
  allValues?: boolean
}

export type LesserThreshold = ThresholdBase & {
  type: 'lesser'
  value: number
}

export type RangeThreshold = ThresholdBase & {
  type: 'range'
  min: number
  max: number
  within: boolean
}

export type CustomCheck = CheckBase & {
  type: 'custom'
}

export interface ScatterViewProperties {
  adaptiveZoomHide?: boolean
  timeFormat?: string
  type: 'scatter'
  queries: DashboardQuery[]
  colors: string[]
  shape: 'chronograf-v2'
  note: string
  showNoteWhenEmpty: boolean
  xColumn: string
  generateXAxisTicks?: string[]
  xTotalTicks?: number
  xTickStart?: number
  xTickStep?: number
  yColumn: string
  generateYAxisTicks?: string[]
  yTotalTicks?: number
  yTickStart?: number
  yTickStep?: number
  fillColumns: string[]
  symbolColumns: string[]
  xDomain: number[]
  yDomain: number[]
  xAxisLabel: string
  yAxisLabel: string
  xPrefix: string
  xSuffix: string
  yPrefix: string
  ySuffix: string
  legendColorizeRows?: boolean
  legendHide?: boolean
  legendOpacity?: number
  legendOrientationThreshold?: number
}

export interface HeatmapViewProperties {
  adaptiveZoomHide?: boolean
  timeFormat?: string
  type: 'heatmap'
  queries: DashboardQuery[]
  colors: string[]
  shape: 'chronograf-v2'
  note: string
  showNoteWhenEmpty: boolean
  xColumn: string
  generateXAxisTicks?: string[]
  xTotalTicks?: number
  xTickStart?: number
  xTickStep?: number
  yColumn: string
  generateYAxisTicks?: string[]
  yTotalTicks?: number
  yTickStart?: number
  yTickStep?: number
  xDomain: number[]
  yDomain: number[]
  xAxisLabel: string
  yAxisLabel: string
  xPrefix: string
  xSuffix: string
  yPrefix: string
  ySuffix: string
  binSize: number
  legendColorizeRows?: boolean
  legendHide?: boolean
  legendOpacity?: number
  legendOrientationThreshold?: number
}

export interface MosaicViewProperties {
  timeFormat?: string
  type: 'mosaic'
  queries: DashboardQuery[]
  colors: string[]
  shape: 'chronograf-v2'
  note: string
  showNoteWhenEmpty: boolean
  xColumn: string
  generateXAxisTicks?: string[]
  xTotalTicks?: number
  xTickStart?: number
  xTickStep?: number
  yLabelColumnSeparator?: string
  yLabelColumns?: string[]
  ySeriesColumns: string[]
  fillColumns: string[]
  xDomain: number[]
  yDomain: number[]
  xAxisLabel: string
  yAxisLabel: string
  xPrefix: string
  xSuffix: string
  yPrefix: string
  ySuffix: string
  hoverDimension?: 'auto' | 'x' | 'y' | 'xy'
  legendColorizeRows?: boolean
  legendHide?: boolean
  legendOpacity?: number
  legendOrientationThreshold?: number
}

export interface BandViewProperties {
  adaptiveZoomHide?: boolean
  timeFormat?: string
  type: 'band'
  queries: DashboardQuery[]
  colors: DashboardColor[]
  shape: 'chronograf-v2'
  note: string
  showNoteWhenEmpty: boolean
  axes: Axes
  staticLegend?: StaticLegend
  xColumn?: string
  generateXAxisTicks?: string[]
  xTotalTicks?: number
  xTickStart?: number
  xTickStep?: number
  yColumn?: string
  generateYAxisTicks?: string[]
  yTotalTicks?: number
  yTickStart?: number
  yTickStep?: number
  upperColumn?: string
  mainColumn?: string
  lowerColumn?: string
  hoverDimension?: 'auto' | 'x' | 'y' | 'xy'
  geom: XYGeom
  legendColorizeRows?: boolean
  legendHide?: boolean
  legendOpacity?: number
  legendOrientationThreshold?: number
}

export interface GeoViewProperties {
  type: 'geo'
  queries: DashboardQuery[]
  shape: 'chronograf-v2'
  center: {
    lat: number
    lon: number
  }
  zoom: number
  allowPanAndZoom: boolean
  detectCoordinateFields: boolean
  useS2CellID?: boolean
  s2Column?: string
  latLonColumns?: LatLonColumns
  mapStyle?: string
  note: string
  showNoteWhenEmpty: boolean
  colors?: DashboardColor[]
  layers: GeoViewLayer[]
}

export interface LatLonColumns {
  lat: LatLonColumn
  lon: LatLonColumn
}

export interface LatLonColumn {
  key: string
  column: string
}

export type GeoViewLayer =
  | GeoCircleViewLayer
  | GeoHeatMapViewLayer
  | GeoPointMapViewLayer
  | GeoTrackMapViewLayer

export type GeoCircleViewLayer = GeoViewLayerProperties & {
  radiusField: string
  radiusDimension: Axis
  colorField: string
  colorDimension: Axis
  colors: DashboardColor[]
  radius?: number
  interpolateColors?: boolean
}

export interface GeoViewLayerProperties {
  type: 'heatmap' | 'circleMap' | 'pointMap' | 'trackMap'
}

export type GeoHeatMapViewLayer = GeoViewLayerProperties & {
  intensityField: string
  intensityDimension: Axis
  radius: number
  blur: number
  colors: DashboardColor[]
}

export type GeoPointMapViewLayer = GeoViewLayerProperties & {
  colorField: string
  colorDimension: Axis
  colors: DashboardColor[]
  isClustered?: boolean
  tooltipColumns?: string[]
}

export type GeoTrackMapViewLayer = GeoViewLayerProperties & any

export interface CreateCell {
  name?: string
  x?: number
  y?: number
  w?: number
  h?: number
  usingView?: string
}

export interface CellUpdate {
  x?: number
  y?: number
  w?: number
  h?: number
}

export interface View {
  readonly links?: {
    self?: string
  }
  readonly id?: string
  name: string
  properties: ViewProperties
}

export interface LanguageRequest {
  query: string
}

export interface ASTResponse {
  ast?: Package
}

export interface Package {
  type?: NodeType
  path?: string
  package?: string
  files?: File[]
}

export type NodeType = string

export interface File {
  type?: NodeType
  name?: string
  package?: PackageClause
  imports?: ImportDeclaration[]
  body?: Statement[]
}

export interface PackageClause {
  type?: NodeType
  name?: Identifier
}

export interface Identifier {
  type?: NodeType
  name?: string
}

export interface ImportDeclaration {
  type?: NodeType
  as?: Identifier
  path?: StringLiteral
}

export interface StringLiteral {
  type?: NodeType
  value?: string
}

export type Statement =
  | BadStatement
  | VariableAssignment
  | MemberAssignment
  | ExpressionStatement
  | ReturnStatement
  | OptionStatement
  | BuiltinStatement
  | TestStatement

export interface BadStatement {
  type?: NodeType
  text?: string
}

export interface VariableAssignment {
  type?: NodeType
  id?: Identifier
  init?: Expression
}

export type Expression =
  | ArrayExpression
  | DictExpression
  | FunctionExpression
  | BinaryExpression
  | CallExpression
  | ConditionalExpression
  | LogicalExpression
  | MemberExpression
  | IndexExpression
  | ObjectExpression
  | ParenExpression
  | PipeExpression
  | UnaryExpression
  | BooleanLiteral
  | DateTimeLiteral
  | DurationLiteral
  | FloatLiteral
  | IntegerLiteral
  | PipeLiteral
  | RegexpLiteral
  | StringLiteral
  | UnsignedIntegerLiteral
  | Identifier

export interface ArrayExpression {
  type?: NodeType
  elements?: Expression[]
}

export interface DictExpression {
  type?: NodeType
  elements?: DictItem[]
}

export interface DictItem {
  type?: NodeType
  key?: Expression
  val?: Expression
}

export interface FunctionExpression {
  type?: NodeType
  params?: Property[]
  body?: Node
}

export interface Property {
  type?: NodeType
  key?: PropertyKey
  value?: Expression
}

export type PropertyKey = Identifier | StringLiteral

export type Node = Expression | Block

export interface Block {
  type?: NodeType
  body?: Statement[]
}

export interface BinaryExpression {
  type?: NodeType
  operator?: string
  left?: Expression
  right?: Expression
}

export interface CallExpression {
  type?: NodeType
  callee?: Expression
  arguments?: Expression[]
}

export interface ConditionalExpression {
  type?: NodeType
  test?: Expression
  alternate?: Expression
  consequent?: Expression
}

export interface LogicalExpression {
  type?: NodeType
  operator?: string
  left?: Expression
  right?: Expression
}

export interface MemberExpression {
  type?: NodeType
  object?: Expression
  property?: PropertyKey
}

export interface IndexExpression {
  type?: NodeType
  array?: Expression
  index?: Expression
}

export interface ObjectExpression {
  type?: NodeType
  properties?: Property[]
}

export interface ParenExpression {
  type?: NodeType
  expression?: Expression
}

export interface PipeExpression {
  type?: NodeType
  argument?: Expression
  call?: CallExpression
}

export interface UnaryExpression {
  type?: NodeType
  operator?: string
  argument?: Expression
}

export interface BooleanLiteral {
  type?: NodeType
  value?: boolean
}

export interface DateTimeLiteral {
  type?: NodeType
  value?: string
}

export interface DurationLiteral {
  type?: NodeType
  values?: Duration[]
}

export interface Duration {
  type?: NodeType
  magnitude?: number
  unit?: string
}

export interface FloatLiteral {
  type?: NodeType
  value?: number
}

export interface IntegerLiteral {
  type?: NodeType
  value?: string
}

export interface PipeLiteral {
  type?: NodeType
}

export interface RegexpLiteral {
  type?: NodeType
  value?: string
}

export interface UnsignedIntegerLiteral {
  type?: NodeType
  value?: string
}

export interface MemberAssignment {
  type?: NodeType
  member?: MemberExpression
  init?: Expression
}

export interface ExpressionStatement {
  type?: NodeType
  expression?: Expression
}

export interface ReturnStatement {
  type?: NodeType
  argument?: Expression
}

export interface OptionStatement {
  type?: NodeType
  assignment?: VariableAssignment | MemberAssignment
}

export interface BuiltinStatement {
  type?: NodeType
  id?: Identifier
}

export interface TestStatement {
  type?: NodeType
  assignment?: VariableAssignment
}

export interface FluxSuggestions {
  funcs?: FluxSuggestion[]
}

export interface FluxSuggestion {
  name?: string
  params?: any
}

export interface Query {
  extern?: File
  query: string
  type?: 'flux'
  params?: any
  dialect?: Dialect
  now?: string
}

export interface Dialect {
  header?: boolean
  delimiter?: string
  annotations?: Array<'group' | 'datatype' | 'default'>
  commentPrefix?: string
  dateTimeFormat?: 'RFC3339' | 'RFC3339Nano'
}

export interface AnalyzeQueryResponse {
  errors?: Array<{
    line?: number
    column?: number
    character?: number
    message?: string
  }>
}

export interface Buckets {
  readonly links?: Links
  buckets?: Bucket[]
}

export interface Bucket {
  readonly links?: {
    labels?: Link
    members?: Link
    org?: Link
    owners?: Link
    self?: Link
    write?: Link
  }
  readonly id?: string
  readonly type?: 'user' | 'system'
  name: string
  description?: string
  orgID?: string
  rp?: string
  schemaType?: SchemaType
  readonly createdAt?: string
  readonly updatedAt?: string
  retentionRules: RetentionRules
  labels?: Labels
}

export type SchemaType = 'implicit' | 'explicit'

export type RetentionRules = RetentionRule[]

export interface RetentionRule {
  type?: 'expire'
  everySeconds: number
  shardGroupDurationSeconds?: number
}

export interface PostBucketRequest {
  orgID: string
  name: string
  description?: string
  rp?: string
  retentionRules?: RetentionRules
  schemaType?: SchemaType
}

export interface PatchBucketRequest {
  name?: string
  description?: string
  retentionRules?: PatchRetentionRules
}

export type PatchRetentionRules = PatchRetentionRule[]

export interface PatchRetentionRule {
  type?: 'expire'
  everySeconds: number
  shardGroupDurationSeconds?: number
}

export interface Organizations {
  links?: Links
  orgs?: Organization[]
}

export interface Organization {
  readonly links?: {
    self?: Link
    members?: Link
    owners?: Link
    labels?: Link
    secrets?: Link
    buckets?: Link
    tasks?: Link
    dashboards?: Link
  }
  readonly id?: string
  name: string
  description?: string
  readonly createdAt?: string
  readonly updatedAt?: string
  status?: 'active' | 'inactive'
}

export interface PostOrganizationRequest {
  name: string
  description?: string
}

export interface PatchOrganizationRequest {
  name?: string
  description?: string
}

export type SecretKeysResponse = SecretKeys & {
  readonly links?: {
    self?: string
    org?: string
  }
}

export interface SecretKeys {
  secrets?: string[]
}

export type Secrets = any

export interface Stack {
  id?: string
  orgID?: string
  readonly createdAt?: string
  events?: Array<{
    eventType?: string
    name?: string
    description?: string
    sources?: string[]
    resources?: Array<{
      apiVersion?: string
      resourceID?: string
      kind?: TemplateKind
      templateMetaName?: string
      associations?: Array<{
        kind?: TemplateKind
        metaName?: string
      }>
      links?: {
        self?: string
      }
    }>
    urls?: string[]
    readonly updatedAt?: string
  }>
}

export type TemplateKind =
  | 'Bucket'
  | 'Check'
  | 'CheckDeadman'
  | 'CheckThreshold'
  | 'Dashboard'
  | 'Label'
  | 'NotificationEndpoint'
  | 'NotificationEndpointHTTP'
  | 'NotificationEndpointPagerDuty'
  | 'NotificationEndpointSlack'
  | 'NotificationRule'
  | 'Task'
  | 'Telegraf'
  | 'Variable'

export interface TemplateApply {
  dryRun?: boolean
  orgID?: string
  stackID?: string
  template?: {
    contentType?: string
    sources?: string[]
    contents?: Template
  }
  templates?: Array<{
    contentType?: string
    sources?: string[]
    contents?: Template
  }>
  envRefs?: any
  secrets?: any
  remotes?: Array<{
    url: string
    contentType?: string
  }>
  actions?: Array<
    | {
        action?: 'skipKind'
        properties?: {
          kind: TemplateKind
        }
      }
    | {
        action?: 'skipResource'
        properties?: {
          kind: TemplateKind
          resourceTemplateName: string
        }
      }
  >
}

export type Template = Array<{
  apiVersion?: string
  kind?: TemplateKind
  metadata?: {
    name?: string
  }
  spec?: any
}>

export interface TemplateSummary {
  sources?: string[]
  stackID?: string
  summary?: {
    buckets?: Array<{
      id?: string
      orgID?: string
      kind?: TemplateKind
      templateMetaName?: string
      name?: string
      description?: string
      retentionPeriod?: number
      labelAssociations?: TemplateSummaryLabel[]
      envReferences?: TemplateEnvReferences
    }>
    checks?: Array<
      CheckDiscriminator & {
        kind?: TemplateKind
        templateMetaName?: string
        labelAssociations?: TemplateSummaryLabel[]
        envReferences?: TemplateEnvReferences
      }
    >
    dashboards?: Array<{
      id?: string
      orgID?: string
      kind?: TemplateKind
      templateMetaName?: string
      name?: string
      description?: string
      labelAssociations?: TemplateSummaryLabel[]
      charts?: TemplateChart[]
      envReferences?: TemplateEnvReferences
    }>
    labels?: TemplateSummaryLabel[]
    labelMappings?: Array<{
      status?: string
      resourceTemplateMetaName?: string
      resourceName?: string
      resourceID?: string
      resourceType?: string
      labelTemplateMetaName?: string
      labelName?: string
      labelID?: string
    }>
    missingEnvRefs?: string[]
    missingSecrets?: string[]
    notificationEndpoints?: Array<
      NotificationEndpointDiscriminator & {
        kind?: TemplateKind
        templateMetaName?: string
        labelAssociations?: TemplateSummaryLabel[]
        envReferences?: TemplateEnvReferences
      }
    >
    notificationRules?: Array<{
      kind?: TemplateKind
      templateMetaName?: string
      name?: string
      description?: string
      endpointTemplateMetaName?: string
      endpointID?: string
      endpointType?: string
      every?: string
      offset?: string
      messageTemplate?: string
      status?: string
      statusRules?: Array<{
        currentLevel?: string
        previousLevel?: string
      }>
      tagRules?: Array<{
        key?: string
        value?: string
        operator?: string
      }>
      labelAssociations?: TemplateSummaryLabel[]
      envReferences?: TemplateEnvReferences
    }>
    tasks?: Array<{
      kind?: TemplateKind
      templateMetaName?: string
      id?: string
      name?: string
      cron?: string
      description?: string
      every?: string
      offset?: string
      query?: string
      status?: string
      envReferences?: TemplateEnvReferences
    }>
    telegrafConfigs?: Array<
      TelegrafRequest & {
        kind?: TemplateKind
        templateMetaName?: string
        labelAssociations?: TemplateSummaryLabel[]
        envReferences?: TemplateEnvReferences
      }
    >
    variables?: Array<{
      kind?: TemplateKind
      templateMetaName?: string
      id?: string
      orgID?: string
      name?: string
      description?: string
      arguments?: VariableProperties
      labelAssociations?: TemplateSummaryLabel[]
      envReferences?: TemplateEnvReferences
    }>
  }
  diff?: {
    buckets?: Array<{
      kind?: TemplateKind
      stateStatus?: string
      id?: string
      templateMetaName?: string
      new?: {
        name?: string
        description?: string
        retentionRules?: RetentionRules
      }
      old?: {
        name?: string
        description?: string
        retentionRules?: RetentionRules
      }
    }>
    checks?: Array<{
      kind?: TemplateKind
      stateStatus?: string
      id?: string
      templateMetaName?: string
      new?: CheckDiscriminator
      old?: CheckDiscriminator
    }>
    dashboards?: Array<{
      stateStatus?: string
      id?: string
      kind?: TemplateKind
      templateMetaName?: string
      new?: {
        name?: string
        description?: string
        charts?: TemplateChart[]
      }
      old?: {
        name?: string
        description?: string
        charts?: TemplateChart[]
      }
    }>
    labels?: Array<{
      stateStatus?: string
      kind?: TemplateKind
      id?: string
      templateMetaName?: string
      new?: {
        name?: string
        color?: string
        description?: string
      }
      old?: {
        name?: string
        color?: string
        description?: string
      }
    }>
    labelMappings?: Array<{
      status?: string
      resourceType?: string
      resourceID?: string
      resourceTemplateMetaName?: string
      resourceName?: string
      labelID?: string
      labelTemplateMetaName?: string
      labelName?: string
    }>
    notificationEndpoints?: Array<{
      kind?: TemplateKind
      stateStatus?: string
      id?: string
      templateMetaName?: string
      new?: NotificationEndpointDiscriminator
      old?: NotificationEndpointDiscriminator
    }>
    notificationRules?: Array<{
      kind?: TemplateKind
      stateStatus?: string
      id?: string
      templateMetaName?: string
      new?: {
        name?: string
        description?: string
        endpointName?: string
        endpointID?: string
        endpointType?: string
        every?: string
        offset?: string
        messageTemplate?: string
        status?: string
        statusRules?: Array<{
          currentLevel?: string
          previousLevel?: string
        }>
        tagRules?: Array<{
          key?: string
          value?: string
          operator?: string
        }>
      }
      old?: {
        name?: string
        description?: string
        endpointName?: string
        endpointID?: string
        endpointType?: string
        every?: string
        offset?: string
        messageTemplate?: string
        status?: string
        statusRules?: Array<{
          currentLevel?: string
          previousLevel?: string
        }>
        tagRules?: Array<{
          key?: string
          value?: string
          operator?: string
        }>
      }
    }>
    tasks?: Array<{
      kind?: TemplateKind
      stateStatus?: string
      id?: string
      templateMetaName?: string
      new?: {
        name?: string
        cron?: string
        description?: string
        every?: string
        offset?: string
        query?: string
        status?: string
      }
      old?: {
        name?: string
        cron?: string
        description?: string
        every?: string
        offset?: string
        query?: string
        status?: string
      }
    }>
    telegrafConfigs?: Array<{
      kind?: TemplateKind
      stateStatus?: string
      id?: string
      templateMetaName?: string
      new?: TelegrafRequest
      old?: TelegrafRequest
    }>
    variables?: Array<{
      kind?: TemplateKind
      stateStatus?: string
      id?: string
      templateMetaName?: string
      new?: {
        name?: string
        description?: string
        args?: VariableProperties
      }
      old?: {
        name?: string
        description?: string
        args?: VariableProperties
      }
    }>
  }
  errors?: Array<{
    kind?: TemplateKind
    reason?: string
    fields?: string[]
    indexes?: number[]
  }>
}

export interface TemplateSummaryLabel {
  id?: string
  orgID?: string
  kind?: TemplateKind
  templateMetaName?: string
  name?: string
  properties?: {
    color?: string
    description?: string
  }
  envReferences?: TemplateEnvReferences
}

export type TemplateEnvReferences = Array<{
  resourceField: string
  envRefKey: string
  value?: string | number | number | boolean
  defaultValue?: string | number | number | boolean
}>

export interface TemplateChart {
  xPos?: number
  yPos?: number
  height?: number
  width?: number
  properties?: ViewProperties
}

export type NotificationEndpointDiscriminator =
  | (SlackNotificationEndpoint & {type: string})
  | (PagerDutyNotificationEndpoint & {type: string})
  | (HTTPNotificationEndpoint & {type: string})
  | (TelegramNotificationEndpoint & {type: string})

export type SlackNotificationEndpoint = NotificationEndpointBase & {
  url?: string
  token?: string
}

export interface NotificationEndpointBase {
  id?: string
  orgID?: string
  userID?: string
  readonly createdAt?: string
  readonly updatedAt?: string
  description?: string
  name: string
  status?: 'active' | 'inactive'
  labels?: Labels
  readonly links?: {
    self?: Link
    labels?: Link
    members?: Link
    owners?: Link
  }
  type: NotificationEndpointType
}

export type NotificationEndpointType =
  | 'slack'
  | 'pagerduty'
  | 'http'
  | 'telegram'

export type PagerDutyNotificationEndpoint = NotificationEndpointBase & {
  clientURL?: string
  routingKey: string
}

export type HTTPNotificationEndpoint = NotificationEndpointBase & {
  url: string
  username?: string
  password?: string
  token?: string
  method: 'POST' | 'GET' | 'PUT'
  authMethod: 'none' | 'basic' | 'bearer'
  contentTemplate?: string
  headers?: any
}

export type TelegramNotificationEndpoint = NotificationEndpointBase & {
  token: string
  channel: string
}

export type VariableProperties =
  | QueryVariableProperties
  | ConstantVariableProperties
  | MapVariableProperties

export interface QueryVariableProperties {
  type?: 'query'
  values?: {
    query?: string
    language?: string
  }
}

export interface ConstantVariableProperties {
  type?: 'constant'
  values?: string[]
}

export interface MapVariableProperties {
  type?: 'map'
  values?: any
}

export interface TemplateExportByID {
  stackID?: string
  orgIDs?: Array<{
    orgID?: string
    resourceFilters?: {
      byLabel?: string[]
      byResourceKind?: TemplateKind[]
    }
  }>
  resources?: Array<{
    id: string
    kind: TemplateKind
    name?: string
  }>
}

export interface TemplateExportByName {
  stackID?: string
  orgIDs?: Array<{
    orgID?: string
    resourceFilters?: {
      byLabel?: string[]
      byResourceKind?: TemplateKind[]
    }
  }>
  resources?: Array<{
    kind: TemplateKind
    name: string
  }>
}

export interface Runs {
  links?: Links
  runs?: Run[]
}

export interface Run {
  readonly id?: string
  readonly taskID?: string
  readonly status?: 'scheduled' | 'started' | 'failed' | 'success' | 'canceled'
  scheduledFor?: string
  readonly log?: LogEvent[]
  readonly flux?: string
  readonly startedAt?: string
  readonly finishedAt?: string
  readonly requestedAt?: string
  readonly links?: {
    self?: string
    task?: string
    retry?: string
  }
}

export interface LogEvent {
  readonly time?: string
  readonly message?: string
  readonly runID?: string
}

export interface RunManually {
  scheduledFor?: string
}

export interface Logs {
  readonly events?: LogEvent[]
}

export type Flags = any

export interface PasswordResetBody {
  password: string
}

export interface Checks {
  checks?: Check[]
  links?: Links
}

export type PostCheck = CheckDiscriminator

export interface CheckPatch {
  name?: string
  description?: string
  status?: 'active' | 'inactive'
}

export interface NotificationRules {
  notificationRules?: NotificationRule[]
  links?: Links
}

export type NotificationRule = NotificationRuleDiscriminator

export type NotificationRuleDiscriminator =
  | (SlackNotificationRule & {type: string})
  | (SMTPNotificationRule & {type: string})
  | (PagerDutyNotificationRule & {type: string})
  | (HTTPNotificationRule & {type: string})
  | (TelegramNotificationRule & {type: string})

export type SlackNotificationRule = NotificationRuleBase &
  SlackNotificationRuleBase

export interface NotificationRuleBase {
  readonly latestCompleted?: string
  readonly lastRunStatus?: 'failed' | 'success' | 'canceled'
  readonly lastRunError?: string
  readonly id?: string
  endpointID: string
  orgID: string
  taskID?: string
  readonly ownerID?: string
  readonly createdAt?: string
  readonly updatedAt?: string
  status: TaskStatusType
  name: string
  sleepUntil?: string
  every?: string
  offset?: string
  runbookLink?: string
  limitEvery?: number
  limit?: number
  tagRules?: TagRule[]
  description?: string
  statusRules: StatusRule[]
  labels?: Labels
  readonly links?: {
    self?: Link
    labels?: Link
    members?: Link
    owners?: Link
    query?: Link
  }
}

export interface TagRule {
  key?: string
  value?: string
  operator?: 'equal' | 'notequal' | 'equalregex' | 'notequalregex'
}

export interface StatusRule {
  currentLevel?: RuleStatusLevel
  previousLevel?: RuleStatusLevel
  count?: number
  period?: string
}

export type RuleStatusLevel =
  | 'UNKNOWN'
  | 'OK'
  | 'INFO'
  | 'CRIT'
  | 'WARN'
  | 'ANY'

export interface SlackNotificationRuleBase {
  type: 'slack'
  channel?: string
  messageTemplate: string
}

export type SMTPNotificationRule = NotificationRuleBase &
  SMTPNotificationRuleBase

export interface SMTPNotificationRuleBase {
  type: 'smtp'
  subjectTemplate: string
  bodyTemplate?: string
  to: string
}

export type PagerDutyNotificationRule = NotificationRuleBase &
  PagerDutyNotificationRuleBase

export interface PagerDutyNotificationRuleBase {
  type: 'pagerduty'
  messageTemplate: string
}

export type HTTPNotificationRule = NotificationRuleBase &
  HTTPNotificationRuleBase

export interface HTTPNotificationRuleBase {
  type: 'http'
  url?: string
}

export type TelegramNotificationRule = NotificationRuleBase &
  TelegramNotificationRuleBase

export interface TelegramNotificationRuleBase {
  type: 'telegram'
  messageTemplate: string
  parseMode?: 'MarkdownV2' | 'HTML' | 'Markdown'
  disableWebPagePreview?: boolean
}

export type PostNotificationRule = NotificationRuleDiscriminator

export interface FluxResponse {
  flux?: string
}

export interface NotificationRuleUpdate {
  name?: string
  description?: string
  status?: 'active' | 'inactive'
}

export interface NotificationEndpoints {
  notificationEndpoints?: NotificationEndpoint[]
  links?: Links
}

export type NotificationEndpoint = NotificationEndpointDiscriminator

export type PostNotificationEndpoint = NotificationEndpointDiscriminator

export interface NotificationEndpointUpdate {
  name?: string
  description?: string
  status?: 'active' | 'inactive'
}

interface RequestOptions {
  signal?: AbortSignal
}

export type RequestHandler = (
  url: string,
  query: string,
  init: RequestInit
) => {url: string; query: string; init: RequestInit}
export type ResponseHandler = (
  status: number,
  headers: Headers,
  data: any
) => {status: number; headers: Headers; data: any}

const RequestContext = function (
  requestHandler: RequestHandler,
  responseHandler: ResponseHandler
) {
  this.requestHandler = requestHandler
  this.responseHandler = responseHandler
}

RequestContext.prototype.request = async function (
  method: string,
  url: string,
  params: any = {},
  options: RequestOptions = {}
): Promise<any> {
  const requestHeaders = new Headers(params.headers)
  const contentType = requestHeaders.get('Content-Type') || ''

  if (params.auth) {
    const credentials = btoa(`${params.auth.username}:${params.auth.password}`)

    requestHeaders.append('Authorization', `Basic ${credentials}`)
  }

  const body =
    params.data && contentType.includes('json')
      ? JSON.stringify(params.data)
      : params.data

  const query = params.query ? `?${new URLSearchParams(params.query)}` : ''

  const {
    url: middlewareUrl,
    query: middlewareQuery,
    init,
  } = this.requestHandler(url, query, {
    method,
    body,
    credentials: 'same-origin',
    signal: options.signal,
    headers: requestHeaders,
  })

  const response = await fetch(`${middlewareUrl}${middlewareQuery}`, init)

  const {status, headers} = response
  const responseContentType = headers.get('Content-Type') || ''

  let data

  if (responseContentType.includes('json')) {
    data = await response.json()
  } else if (responseContentType.includes('octet-stream')) {
    data = await response.blob()
  } else {
    data = await response.text()
  }

  return this.responseHandler(status, headers, data)
}

RequestContext.prototype.setRequestHandler = function (
  requestHandler: RequestHandler
) {
  this.requestHandler = requestHandler
}

RequestContext.prototype.setResponseHandler = function (
  responseHandler: ResponseHandler
) {
  this.responseHandler = responseHandler
}

const rc = new RequestContext(
  (url, query, init) => {
    return {url, query, init}
  },
  (status, headers, data) => {
    return {status, headers, data}
  }
)
const request = rc.request.bind(rc)
const setRequestHandler = rc.setRequestHandler.bind(rc)
const setResponseHandler = rc.setResponseHandler.bind(rc)

export {request, setRequestHandler, setResponseHandler}

export interface PostSigninParams {
  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostSigninResult =
  | PostSigninNoContentResult
  | PostSigninUnauthorizedResult
  | PostSigninForbiddenResult
  | PostSigninDefaultResult

interface PostSigninNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface PostSigninUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PostSigninForbiddenResult {
  status: 403
  headers: Headers
  data: Error
}

interface PostSigninDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postSignin = (
  params: PostSigninParams,
  options: RequestOptions = {}
): Promise<PostSigninResult> =>
  request(
    'POST',
    '/api/v2/signin',
    params,
    options
  ) as Promise<PostSigninResult>

export interface PostSignoutParams {
  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostSignoutResult =
  | PostSignoutNoContentResult
  | PostSignoutUnauthorizedResult
  | PostSignoutDefaultResult

interface PostSignoutNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface PostSignoutUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PostSignoutDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postSignout = (
  params: PostSignoutParams,
  options: RequestOptions = {}
): Promise<PostSignoutResult> =>
  request(
    'POST',
    '/api/v2/signout',
    params,
    options
  ) as Promise<PostSignoutResult>

export interface GetPingParams {}

type GetPingResult = GetPingNoContentResult

interface GetPingNoContentResult {
  status: 204
  headers: Headers
  data: any
}

export const getPing = (
  params: GetPingParams,
  options: RequestOptions = {}
): Promise<GetPingResult> =>
  request('GET', '/api/v2/ping', params, options) as Promise<GetPingResult>

export interface GetParams {
  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetResult = GetDefaultResult

interface GetDefaultResult {
  status: 500
  headers: Headers
  data: Routes
}

export const get = (
  params: GetParams,
  options: RequestOptions = {}
): Promise<GetResult> =>
  request('GET', '/api/v2/', params, options) as Promise<GetResult>

export interface GetDbrpsParams {
  query?: {
    orgID?: string
    org?: string
    id?: string
    bucketID?: string
    default?: any
    db?: string
    rp?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetDbrpsResult =
  | GetDbrpsOKResult
  | GetDbrpsBadRequestResult
  | GetDbrpsDefaultResult

interface GetDbrpsOKResult {
  status: 200
  headers: Headers
  data: DBRPs
}

interface GetDbrpsBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetDbrpsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getDbrps = (
  params: GetDbrpsParams,
  options: RequestOptions = {}
): Promise<GetDbrpsResult> =>
  request('GET', '/api/v2/dbrps', params, options) as Promise<GetDbrpsResult>

export interface PostDbrpParams {
  data: DBRPCreate

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostDbrpResult =
  | PostDbrpCreatedResult
  | PostDbrpBadRequestResult
  | PostDbrpDefaultResult

interface PostDbrpCreatedResult {
  status: 201
  headers: Headers
  data: DBRP
}

interface PostDbrpBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostDbrpDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postDbrp = (
  params: PostDbrpParams,
  options: RequestOptions = {}
): Promise<PostDbrpResult> =>
  request(
    'POST',
    '/api/v2/dbrps',
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostDbrpResult>

export interface GetDbrpParams {
  dbrpID: string

  query?: {
    orgID?: string
    org?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetDbrpResult =
  | GetDbrpOKResult
  | GetDbrpBadRequestResult
  | GetDbrpDefaultResult

interface GetDbrpOKResult {
  status: 200
  headers: Headers
  data: DBRPGet
}

interface GetDbrpBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetDbrpDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getDbrp = (
  params: GetDbrpParams,
  options: RequestOptions = {}
): Promise<GetDbrpResult> =>
  request(
    'GET',
    `/api/v2/dbrps/${params.dbrpID}`,
    params,
    options
  ) as Promise<GetDbrpResult>

export interface PatchDbrpParams {
  dbrpID: string

  data: DBRPUpdate

  query?: {
    orgID?: string
    org?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PatchDbrpResult =
  | PatchDbrpOKResult
  | PatchDbrpBadRequestResult
  | PatchDbrpNotFoundResult
  | PatchDbrpDefaultResult

interface PatchDbrpOKResult {
  status: 200
  headers: Headers
  data: DBRPGet
}

interface PatchDbrpBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PatchDbrpNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PatchDbrpDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchDbrp = (
  params: PatchDbrpParams,
  options: RequestOptions = {}
): Promise<PatchDbrpResult> =>
  request(
    'PATCH',
    `/api/v2/dbrps/${params.dbrpID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PatchDbrpResult>

export interface DeleteDbrpParams {
  dbrpID: string

  query?: {
    orgID?: string
    org?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteDbrpResult =
  | DeleteDbrpNoContentResult
  | DeleteDbrpBadRequestResult
  | DeleteDbrpDefaultResult

interface DeleteDbrpNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteDbrpBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface DeleteDbrpDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteDbrp = (
  params: DeleteDbrpParams,
  options: RequestOptions = {}
): Promise<DeleteDbrpResult> =>
  request(
    'DELETE',
    `/api/v2/dbrps/${params.dbrpID}`,
    params,
    options
  ) as Promise<DeleteDbrpResult>

export interface GetTelegrafPluginsParams {
  query?: {
    type?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTelegrafPluginsResult =
  | GetTelegrafPluginsOKResult
  | GetTelegrafPluginsDefaultResult

interface GetTelegrafPluginsOKResult {
  status: 200
  headers: Headers
  data: TelegrafPlugins
}

interface GetTelegrafPluginsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTelegrafPlugins = (
  params: GetTelegrafPluginsParams,
  options: RequestOptions = {}
): Promise<GetTelegrafPluginsResult> =>
  request(
    'GET',
    '/api/v2/telegraf/plugins',
    params,
    options
  ) as Promise<GetTelegrafPluginsResult>

export interface GetTelegrafsParams {
  query?: {
    orgID?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTelegrafsResult = GetTelegrafsOKResult | GetTelegrafsDefaultResult

interface GetTelegrafsOKResult {
  status: 200
  headers: Headers
  data: Telegrafs
}

interface GetTelegrafsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTelegrafs = (
  params: GetTelegrafsParams,
  options: RequestOptions = {}
): Promise<GetTelegrafsResult> =>
  request(
    'GET',
    '/api/v2/telegrafs',
    params,
    options
  ) as Promise<GetTelegrafsResult>

export interface PostTelegrafParams {
  data: TelegrafPluginRequest

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostTelegrafResult = PostTelegrafCreatedResult | PostTelegrafDefaultResult

interface PostTelegrafCreatedResult {
  status: 201
  headers: Headers
  data: Telegraf
}

interface PostTelegrafDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postTelegraf = (
  params: PostTelegrafParams,
  options: RequestOptions = {}
): Promise<PostTelegrafResult> =>
  request(
    'POST',
    '/api/v2/telegrafs',
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostTelegrafResult>

export interface GetTelegrafParams {
  telegrafID: string

  headers?: {
    'Zap-Trace-Span'?: string
    Accept?: string
  }
}

type GetTelegrafResult = GetTelegrafOKResult | GetTelegrafDefaultResult

interface GetTelegrafOKResult {
  status: 200
  headers: Headers
  data: Telegraf
}

interface GetTelegrafDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTelegraf = (
  params: GetTelegrafParams,
  options: RequestOptions = {}
): Promise<GetTelegrafResult> =>
  request(
    'GET',
    `/api/v2/telegrafs/${params.telegrafID}`,
    params,
    options
  ) as Promise<GetTelegrafResult>

export interface PutTelegrafParams {
  telegrafID: string

  data: TelegrafPluginRequest

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PutTelegrafResult = PutTelegrafOKResult | PutTelegrafDefaultResult

interface PutTelegrafOKResult {
  status: 200
  headers: Headers
  data: Telegraf
}

interface PutTelegrafDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const putTelegraf = (
  params: PutTelegrafParams,
  options: RequestOptions = {}
): Promise<PutTelegrafResult> =>
  request(
    'PUT',
    `/api/v2/telegrafs/${params.telegrafID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PutTelegrafResult>

export interface DeleteTelegrafParams {
  telegrafID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteTelegrafResult =
  | DeleteTelegrafNoContentResult
  | DeleteTelegrafDefaultResult

interface DeleteTelegrafNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteTelegrafDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteTelegraf = (
  params: DeleteTelegrafParams,
  options: RequestOptions = {}
): Promise<DeleteTelegrafResult> =>
  request(
    'DELETE',
    `/api/v2/telegrafs/${params.telegrafID}`,
    params,
    options
  ) as Promise<DeleteTelegrafResult>

export interface GetTelegrafsLabelsParams {
  telegrafID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTelegrafsLabelsResult =
  | GetTelegrafsLabelsOKResult
  | GetTelegrafsLabelsDefaultResult

interface GetTelegrafsLabelsOKResult {
  status: 200
  headers: Headers
  data: LabelsResponse
}

interface GetTelegrafsLabelsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTelegrafsLabels = (
  params: GetTelegrafsLabelsParams,
  options: RequestOptions = {}
): Promise<GetTelegrafsLabelsResult> =>
  request(
    'GET',
    `/api/v2/telegrafs/${params.telegrafID}/labels`,
    params,
    options
  ) as Promise<GetTelegrafsLabelsResult>

export interface PostTelegrafsLabelParams {
  telegrafID: string

  data: LabelMapping

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostTelegrafsLabelResult =
  | PostTelegrafsLabelCreatedResult
  | PostTelegrafsLabelDefaultResult

interface PostTelegrafsLabelCreatedResult {
  status: 201
  headers: Headers
  data: LabelResponse
}

interface PostTelegrafsLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postTelegrafsLabel = (
  params: PostTelegrafsLabelParams,
  options: RequestOptions = {}
): Promise<PostTelegrafsLabelResult> =>
  request(
    'POST',
    `/api/v2/telegrafs/${params.telegrafID}/labels`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostTelegrafsLabelResult>

export interface DeleteTelegrafsLabelParams {
  telegrafID: string
  labelID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteTelegrafsLabelResult =
  | DeleteTelegrafsLabelNoContentResult
  | DeleteTelegrafsLabelNotFoundResult
  | DeleteTelegrafsLabelDefaultResult

interface DeleteTelegrafsLabelNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteTelegrafsLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteTelegrafsLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteTelegrafsLabel = (
  params: DeleteTelegrafsLabelParams,
  options: RequestOptions = {}
): Promise<DeleteTelegrafsLabelResult> =>
  request(
    'DELETE',
    `/api/v2/telegrafs/${params.telegrafID}/labels/${params.labelID}`,
    params,
    options
  ) as Promise<DeleteTelegrafsLabelResult>

export interface GetTelegrafsMembersParams {
  telegrafID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTelegrafsMembersResult =
  | GetTelegrafsMembersOKResult
  | GetTelegrafsMembersDefaultResult

interface GetTelegrafsMembersOKResult {
  status: 200
  headers: Headers
  data: ResourceMembers
}

interface GetTelegrafsMembersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTelegrafsMembers = (
  params: GetTelegrafsMembersParams,
  options: RequestOptions = {}
): Promise<GetTelegrafsMembersResult> =>
  request(
    'GET',
    `/api/v2/telegrafs/${params.telegrafID}/members`,
    params,
    options
  ) as Promise<GetTelegrafsMembersResult>

export interface PostTelegrafsMemberParams {
  telegrafID: string

  data: AddResourceMemberRequestBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostTelegrafsMemberResult =
  | PostTelegrafsMemberCreatedResult
  | PostTelegrafsMemberDefaultResult

interface PostTelegrafsMemberCreatedResult {
  status: 201
  headers: Headers
  data: ResourceMember
}

interface PostTelegrafsMemberDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postTelegrafsMember = (
  params: PostTelegrafsMemberParams,
  options: RequestOptions = {}
): Promise<PostTelegrafsMemberResult> =>
  request(
    'POST',
    `/api/v2/telegrafs/${params.telegrafID}/members`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostTelegrafsMemberResult>

export interface DeleteTelegrafsMemberParams {
  userID: string
  telegrafID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteTelegrafsMemberResult =
  | DeleteTelegrafsMemberNoContentResult
  | DeleteTelegrafsMemberDefaultResult

interface DeleteTelegrafsMemberNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteTelegrafsMemberDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteTelegrafsMember = (
  params: DeleteTelegrafsMemberParams,
  options: RequestOptions = {}
): Promise<DeleteTelegrafsMemberResult> =>
  request(
    'DELETE',
    `/api/v2/telegrafs/${params.telegrafID}/members/${params.userID}`,
    params,
    options
  ) as Promise<DeleteTelegrafsMemberResult>

export interface GetTelegrafsOwnersParams {
  telegrafID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTelegrafsOwnersResult =
  | GetTelegrafsOwnersOKResult
  | GetTelegrafsOwnersDefaultResult

interface GetTelegrafsOwnersOKResult {
  status: 200
  headers: Headers
  data: ResourceOwners
}

interface GetTelegrafsOwnersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTelegrafsOwners = (
  params: GetTelegrafsOwnersParams,
  options: RequestOptions = {}
): Promise<GetTelegrafsOwnersResult> =>
  request(
    'GET',
    `/api/v2/telegrafs/${params.telegrafID}/owners`,
    params,
    options
  ) as Promise<GetTelegrafsOwnersResult>

export interface PostTelegrafsOwnerParams {
  telegrafID: string

  data: AddResourceMemberRequestBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostTelegrafsOwnerResult =
  | PostTelegrafsOwnerCreatedResult
  | PostTelegrafsOwnerDefaultResult

interface PostTelegrafsOwnerCreatedResult {
  status: 201
  headers: Headers
  data: ResourceOwner
}

interface PostTelegrafsOwnerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postTelegrafsOwner = (
  params: PostTelegrafsOwnerParams,
  options: RequestOptions = {}
): Promise<PostTelegrafsOwnerResult> =>
  request(
    'POST',
    `/api/v2/telegrafs/${params.telegrafID}/owners`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostTelegrafsOwnerResult>

export interface DeleteTelegrafsOwnerParams {
  userID: string
  telegrafID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteTelegrafsOwnerResult =
  | DeleteTelegrafsOwnerNoContentResult
  | DeleteTelegrafsOwnerDefaultResult

interface DeleteTelegrafsOwnerNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteTelegrafsOwnerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteTelegrafsOwner = (
  params: DeleteTelegrafsOwnerParams,
  options: RequestOptions = {}
): Promise<DeleteTelegrafsOwnerResult> =>
  request(
    'DELETE',
    `/api/v2/telegrafs/${params.telegrafID}/owners/${params.userID}`,
    params,
    options
  ) as Promise<DeleteTelegrafsOwnerResult>

export interface GetVariablesLabelsParams {
  variableID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetVariablesLabelsResult =
  | GetVariablesLabelsOKResult
  | GetVariablesLabelsDefaultResult

interface GetVariablesLabelsOKResult {
  status: 200
  headers: Headers
  data: LabelsResponse
}

interface GetVariablesLabelsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getVariablesLabels = (
  params: GetVariablesLabelsParams,
  options: RequestOptions = {}
): Promise<GetVariablesLabelsResult> =>
  request(
    'GET',
    `/api/v2/variables/${params.variableID}/labels`,
    params,
    options
  ) as Promise<GetVariablesLabelsResult>

export interface PostVariablesLabelParams {
  variableID: string

  data: LabelMapping

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostVariablesLabelResult =
  | PostVariablesLabelCreatedResult
  | PostVariablesLabelDefaultResult

interface PostVariablesLabelCreatedResult {
  status: 201
  headers: Headers
  data: LabelResponse
}

interface PostVariablesLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postVariablesLabel = (
  params: PostVariablesLabelParams,
  options: RequestOptions = {}
): Promise<PostVariablesLabelResult> =>
  request(
    'POST',
    `/api/v2/variables/${params.variableID}/labels`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostVariablesLabelResult>

export interface DeleteVariablesLabelParams {
  variableID: string
  labelID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteVariablesLabelResult =
  | DeleteVariablesLabelNoContentResult
  | DeleteVariablesLabelNotFoundResult
  | DeleteVariablesLabelDefaultResult

interface DeleteVariablesLabelNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteVariablesLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteVariablesLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteVariablesLabel = (
  params: DeleteVariablesLabelParams,
  options: RequestOptions = {}
): Promise<DeleteVariablesLabelResult> =>
  request(
    'DELETE',
    `/api/v2/variables/${params.variableID}/labels/${params.labelID}`,
    params,
    options
  ) as Promise<DeleteVariablesLabelResult>

export interface PostWriteParams {
  data: string

  query: {
    org: string
    orgID?: string
    bucket: string
    precision?: any
  }

  headers?: {
    'Zap-Trace-Span'?: string
    'Content-Encoding'?: string
    'Content-Type'?: string
    'Content-Length'?: number
    Accept?: string
  }
}

type PostWriteResult =
  | PostWriteNoContentResult
  | PostWriteBadRequestResult
  | PostWriteUnauthorizedResult
  | PostWriteNotFoundResult
  | PostWritePayloadTooLargeResult
  | PostWriteTooManyRequestsResult
  | PostWriteInternalServerErrorResult
  | PostWriteServiceUnavailableResult
  | PostWriteDefaultResult

interface PostWriteNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface PostWriteBadRequestResult {
  status: 400
  headers: Headers
  data: LineProtocolError
}

interface PostWriteUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostWriteNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PostWritePayloadTooLargeResult {
  status: 413
  headers: Headers
  data: LineProtocolLengthError
}

interface PostWriteTooManyRequestsResult {
  status: 429
  headers: Headers
  data: any
}

interface PostWriteInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostWriteServiceUnavailableResult {
  status: 503
  headers: Headers
  data: any
}

interface PostWriteDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postWrite = (
  params: PostWriteParams,
  options: RequestOptions = {}
): Promise<PostWriteResult> =>
  request(
    'POST',
    '/api/v2/write',
    {...params, headers: {...params.headers, 'Content-Type': 'text/plain'}},
    options
  ) as Promise<PostWriteResult>

export interface PostDeleteParams {
  data: DeletePredicateRequest

  query?: {
    org?: string
    bucket?: string
    orgID?: string
    bucketID?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostDeleteResult =
  | PostDeleteNoContentResult
  | PostDeleteBadRequestResult
  | PostDeleteUnauthorizedResult
  | PostDeleteNotFoundResult
  | PostDeleteInternalServerErrorResult
  | PostDeleteDefaultResult

interface PostDeleteNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface PostDeleteBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostDeleteUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostDeleteNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PostDeleteInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostDeleteDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postDelete = (
  params: PostDeleteParams,
  options: RequestOptions = {}
): Promise<PostDeleteResult> =>
  request(
    'POST',
    '/api/v2/delete',
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostDeleteResult>

export interface GetLabelsParams {
  query?: {
    orgID?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetLabelsResult =
  | GetLabelsOKResult
  | GetLabelsInternalServerErrorResult
  | GetLabelsDefaultResult

interface GetLabelsOKResult {
  status: 200
  headers: Headers
  data: LabelsResponse
}

interface GetLabelsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetLabelsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getLabels = (
  params: GetLabelsParams,
  options: RequestOptions = {}
): Promise<GetLabelsResult> =>
  request('GET', '/api/v2/labels', params, options) as Promise<GetLabelsResult>

export interface PostLabelParams {
  data: LabelCreateRequest
}

type PostLabelResult =
  | PostLabelCreatedResult
  | PostLabelInternalServerErrorResult
  | PostLabelDefaultResult

interface PostLabelCreatedResult {
  status: 201
  headers: Headers
  data: LabelResponse
}

interface PostLabelInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postLabel = (
  params: PostLabelParams,
  options: RequestOptions = {}
): Promise<PostLabelResult> =>
  request(
    'POST',
    '/api/v2/labels',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostLabelResult>

export interface GetLabelParams {
  labelID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetLabelResult =
  | GetLabelOKResult
  | GetLabelInternalServerErrorResult
  | GetLabelDefaultResult

interface GetLabelOKResult {
  status: 200
  headers: Headers
  data: LabelResponse
}

interface GetLabelInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getLabel = (
  params: GetLabelParams,
  options: RequestOptions = {}
): Promise<GetLabelResult> =>
  request(
    'GET',
    `/api/v2/labels/${params.labelID}`,
    params,
    options
  ) as Promise<GetLabelResult>

export interface PatchLabelParams {
  labelID: string

  data: LabelUpdate

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PatchLabelResult =
  | PatchLabelOKResult
  | PatchLabelUnauthorizedResult
  | PatchLabelNotFoundResult
  | PatchLabelInternalServerErrorResult
  | PatchLabelDefaultResult

interface PatchLabelOKResult {
  status: 200
  headers: Headers
  data: LabelResponse
}

interface PatchLabelUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PatchLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PatchLabelInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PatchLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchLabel = (
  params: PatchLabelParams,
  options: RequestOptions = {}
): Promise<PatchLabelResult> =>
  request(
    'PATCH',
    `/api/v2/labels/${params.labelID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PatchLabelResult>

export interface DeleteLabelParams {
  labelID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteLabelResult =
  | DeleteLabelNoContentResult
  | DeleteLabelUnauthorizedResult
  | DeleteLabelNotFoundResult
  | DeleteLabelInternalServerErrorResult
  | DeleteLabelDefaultResult

interface DeleteLabelNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteLabelUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface DeleteLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteLabelInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface DeleteLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteLabel = (
  params: DeleteLabelParams,
  options: RequestOptions = {}
): Promise<DeleteLabelResult> =>
  request(
    'DELETE',
    `/api/v2/labels/${params.labelID}`,
    params,
    options
  ) as Promise<DeleteLabelResult>

export interface GetDashboardParams {
  dashboardID: string

  query?: {
    include?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetDashboardResult =
  | GetDashboardOKResult
  | GetDashboardNotFoundResult
  | GetDashboardDefaultResult

interface GetDashboardOKResult {
  status: 200
  headers: Headers
  data: Dashboard | DashboardWithViewProperties
}

interface GetDashboardNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetDashboardDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getDashboard = (
  params: GetDashboardParams,
  options: RequestOptions = {}
): Promise<GetDashboardResult> =>
  request(
    'GET',
    `/api/v2/dashboards/${params.dashboardID}`,
    params,
    options
  ) as Promise<GetDashboardResult>

export interface PatchDashboardParams {
  dashboardID: string

  data: {
    name?: string
    description?: string
    cells?: CellWithViewProperties
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PatchDashboardResult =
  | PatchDashboardOKResult
  | PatchDashboardNotFoundResult
  | PatchDashboardDefaultResult

interface PatchDashboardOKResult {
  status: 200
  headers: Headers
  data: Dashboard
}

interface PatchDashboardNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PatchDashboardDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchDashboard = (
  params: PatchDashboardParams,
  options: RequestOptions = {}
): Promise<PatchDashboardResult> =>
  request(
    'PATCH',
    `/api/v2/dashboards/${params.dashboardID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PatchDashboardResult>

export interface DeleteDashboardParams {
  dashboardID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteDashboardResult =
  | DeleteDashboardNoContentResult
  | DeleteDashboardNotFoundResult
  | DeleteDashboardDefaultResult

interface DeleteDashboardNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteDashboardNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteDashboardDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteDashboard = (
  params: DeleteDashboardParams,
  options: RequestOptions = {}
): Promise<DeleteDashboardResult> =>
  request(
    'DELETE',
    `/api/v2/dashboards/${params.dashboardID}`,
    params,
    options
  ) as Promise<DeleteDashboardResult>

export interface PostDashboardsCellParams {
  dashboardID: string

  data: CreateCell

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostDashboardsCellResult =
  | PostDashboardsCellCreatedResult
  | PostDashboardsCellNotFoundResult
  | PostDashboardsCellDefaultResult

interface PostDashboardsCellCreatedResult {
  status: 201
  headers: Headers
  data: Cell
}

interface PostDashboardsCellNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PostDashboardsCellDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postDashboardsCell = (
  params: PostDashboardsCellParams,
  options: RequestOptions = {}
): Promise<PostDashboardsCellResult> =>
  request(
    'POST',
    `/api/v2/dashboards/${params.dashboardID}/cells`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostDashboardsCellResult>

export interface PutDashboardsCellsParams {
  dashboardID: string

  data: Cells

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PutDashboardsCellsResult =
  | PutDashboardsCellsCreatedResult
  | PutDashboardsCellsNotFoundResult
  | PutDashboardsCellsDefaultResult

interface PutDashboardsCellsCreatedResult {
  status: 201
  headers: Headers
  data: Dashboard
}

interface PutDashboardsCellsNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PutDashboardsCellsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const putDashboardsCells = (
  params: PutDashboardsCellsParams,
  options: RequestOptions = {}
): Promise<PutDashboardsCellsResult> =>
  request(
    'PUT',
    `/api/v2/dashboards/${params.dashboardID}/cells`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PutDashboardsCellsResult>

export interface PatchDashboardsCellParams {
  dashboardID: string
  cellID: string

  data: CellUpdate

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PatchDashboardsCellResult =
  | PatchDashboardsCellOKResult
  | PatchDashboardsCellNotFoundResult
  | PatchDashboardsCellDefaultResult

interface PatchDashboardsCellOKResult {
  status: 200
  headers: Headers
  data: Cell
}

interface PatchDashboardsCellNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PatchDashboardsCellDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchDashboardsCell = (
  params: PatchDashboardsCellParams,
  options: RequestOptions = {}
): Promise<PatchDashboardsCellResult> =>
  request(
    'PATCH',
    `/api/v2/dashboards/${params.dashboardID}/cells/${params.cellID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PatchDashboardsCellResult>

export interface DeleteDashboardsCellParams {
  dashboardID: string
  cellID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteDashboardsCellResult =
  | DeleteDashboardsCellNoContentResult
  | DeleteDashboardsCellNotFoundResult
  | DeleteDashboardsCellDefaultResult

interface DeleteDashboardsCellNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteDashboardsCellNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteDashboardsCellDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteDashboardsCell = (
  params: DeleteDashboardsCellParams,
  options: RequestOptions = {}
): Promise<DeleteDashboardsCellResult> =>
  request(
    'DELETE',
    `/api/v2/dashboards/${params.dashboardID}/cells/${params.cellID}`,
    params,
    options
  ) as Promise<DeleteDashboardsCellResult>

export interface GetDashboardsCellsViewParams {
  dashboardID: string
  cellID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetDashboardsCellsViewResult =
  | GetDashboardsCellsViewOKResult
  | GetDashboardsCellsViewNotFoundResult
  | GetDashboardsCellsViewDefaultResult

interface GetDashboardsCellsViewOKResult {
  status: 200
  headers: Headers
  data: View
}

interface GetDashboardsCellsViewNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetDashboardsCellsViewDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getDashboardsCellsView = (
  params: GetDashboardsCellsViewParams,
  options: RequestOptions = {}
): Promise<GetDashboardsCellsViewResult> =>
  request(
    'GET',
    `/api/v2/dashboards/${params.dashboardID}/cells/${params.cellID}/view`,
    params,
    options
  ) as Promise<GetDashboardsCellsViewResult>

export interface PatchDashboardsCellsViewParams {
  dashboardID: string
  cellID: string

  data: View

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PatchDashboardsCellsViewResult =
  | PatchDashboardsCellsViewOKResult
  | PatchDashboardsCellsViewNotFoundResult
  | PatchDashboardsCellsViewDefaultResult

interface PatchDashboardsCellsViewOKResult {
  status: 200
  headers: Headers
  data: View
}

interface PatchDashboardsCellsViewNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PatchDashboardsCellsViewDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchDashboardsCellsView = (
  params: PatchDashboardsCellsViewParams,
  options: RequestOptions = {}
): Promise<PatchDashboardsCellsViewResult> =>
  request(
    'PATCH',
    `/api/v2/dashboards/${params.dashboardID}/cells/${params.cellID}/view`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PatchDashboardsCellsViewResult>

export interface GetDashboardsLabelsParams {
  dashboardID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetDashboardsLabelsResult =
  | GetDashboardsLabelsOKResult
  | GetDashboardsLabelsDefaultResult

interface GetDashboardsLabelsOKResult {
  status: 200
  headers: Headers
  data: LabelsResponse
}

interface GetDashboardsLabelsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getDashboardsLabels = (
  params: GetDashboardsLabelsParams,
  options: RequestOptions = {}
): Promise<GetDashboardsLabelsResult> =>
  request(
    'GET',
    `/api/v2/dashboards/${params.dashboardID}/labels`,
    params,
    options
  ) as Promise<GetDashboardsLabelsResult>

export interface PostDashboardsLabelParams {
  dashboardID: string

  data: LabelMapping

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostDashboardsLabelResult =
  | PostDashboardsLabelCreatedResult
  | PostDashboardsLabelDefaultResult

interface PostDashboardsLabelCreatedResult {
  status: 201
  headers: Headers
  data: LabelResponse
}

interface PostDashboardsLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postDashboardsLabel = (
  params: PostDashboardsLabelParams,
  options: RequestOptions = {}
): Promise<PostDashboardsLabelResult> =>
  request(
    'POST',
    `/api/v2/dashboards/${params.dashboardID}/labels`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostDashboardsLabelResult>

export interface DeleteDashboardsLabelParams {
  dashboardID: string
  labelID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteDashboardsLabelResult =
  | DeleteDashboardsLabelNoContentResult
  | DeleteDashboardsLabelNotFoundResult
  | DeleteDashboardsLabelDefaultResult

interface DeleteDashboardsLabelNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteDashboardsLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteDashboardsLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteDashboardsLabel = (
  params: DeleteDashboardsLabelParams,
  options: RequestOptions = {}
): Promise<DeleteDashboardsLabelResult> =>
  request(
    'DELETE',
    `/api/v2/dashboards/${params.dashboardID}/labels/${params.labelID}`,
    params,
    options
  ) as Promise<DeleteDashboardsLabelResult>

export interface GetDashboardsMembersParams {
  dashboardID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetDashboardsMembersResult =
  | GetDashboardsMembersOKResult
  | GetDashboardsMembersDefaultResult

interface GetDashboardsMembersOKResult {
  status: 200
  headers: Headers
  data: ResourceMembers
}

interface GetDashboardsMembersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getDashboardsMembers = (
  params: GetDashboardsMembersParams,
  options: RequestOptions = {}
): Promise<GetDashboardsMembersResult> =>
  request(
    'GET',
    `/api/v2/dashboards/${params.dashboardID}/members`,
    params,
    options
  ) as Promise<GetDashboardsMembersResult>

export interface PostDashboardsMemberParams {
  dashboardID: string

  data: AddResourceMemberRequestBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostDashboardsMemberResult =
  | PostDashboardsMemberCreatedResult
  | PostDashboardsMemberDefaultResult

interface PostDashboardsMemberCreatedResult {
  status: 201
  headers: Headers
  data: ResourceMember
}

interface PostDashboardsMemberDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postDashboardsMember = (
  params: PostDashboardsMemberParams,
  options: RequestOptions = {}
): Promise<PostDashboardsMemberResult> =>
  request(
    'POST',
    `/api/v2/dashboards/${params.dashboardID}/members`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostDashboardsMemberResult>

export interface DeleteDashboardsMemberParams {
  userID: string
  dashboardID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteDashboardsMemberResult =
  | DeleteDashboardsMemberNoContentResult
  | DeleteDashboardsMemberDefaultResult

interface DeleteDashboardsMemberNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteDashboardsMemberDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteDashboardsMember = (
  params: DeleteDashboardsMemberParams,
  options: RequestOptions = {}
): Promise<DeleteDashboardsMemberResult> =>
  request(
    'DELETE',
    `/api/v2/dashboards/${params.dashboardID}/members/${params.userID}`,
    params,
    options
  ) as Promise<DeleteDashboardsMemberResult>

export interface GetDashboardsOwnersParams {
  dashboardID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetDashboardsOwnersResult =
  | GetDashboardsOwnersOKResult
  | GetDashboardsOwnersDefaultResult

interface GetDashboardsOwnersOKResult {
  status: 200
  headers: Headers
  data: ResourceOwners
}

interface GetDashboardsOwnersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getDashboardsOwners = (
  params: GetDashboardsOwnersParams,
  options: RequestOptions = {}
): Promise<GetDashboardsOwnersResult> =>
  request(
    'GET',
    `/api/v2/dashboards/${params.dashboardID}/owners`,
    params,
    options
  ) as Promise<GetDashboardsOwnersResult>

export interface PostDashboardsOwnerParams {
  dashboardID: string

  data: AddResourceMemberRequestBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostDashboardsOwnerResult =
  | PostDashboardsOwnerCreatedResult
  | PostDashboardsOwnerDefaultResult

interface PostDashboardsOwnerCreatedResult {
  status: 201
  headers: Headers
  data: ResourceOwner
}

interface PostDashboardsOwnerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postDashboardsOwner = (
  params: PostDashboardsOwnerParams,
  options: RequestOptions = {}
): Promise<PostDashboardsOwnerResult> =>
  request(
    'POST',
    `/api/v2/dashboards/${params.dashboardID}/owners`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostDashboardsOwnerResult>

export interface DeleteDashboardsOwnerParams {
  userID: string
  dashboardID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteDashboardsOwnerResult =
  | DeleteDashboardsOwnerNoContentResult
  | DeleteDashboardsOwnerDefaultResult

interface DeleteDashboardsOwnerNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteDashboardsOwnerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteDashboardsOwner = (
  params: DeleteDashboardsOwnerParams,
  options: RequestOptions = {}
): Promise<DeleteDashboardsOwnerResult> =>
  request(
    'DELETE',
    `/api/v2/dashboards/${params.dashboardID}/owners/${params.userID}`,
    params,
    options
  ) as Promise<DeleteDashboardsOwnerResult>

export interface PostQueryAstParams {
  data?: LanguageRequest

  headers?: {
    'Zap-Trace-Span'?: string
    'Content-Type'?: string
  }
}

type PostQueryAstResult =
  | PostQueryAstOKResult
  | PostQueryAstBadRequestResult
  | PostQueryAstDefaultResult

interface PostQueryAstOKResult {
  status: 200
  headers: Headers
  data: ASTResponse
}

interface PostQueryAstBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostQueryAstDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postQueryAst = (
  params: PostQueryAstParams,
  options: RequestOptions = {}
): Promise<PostQueryAstResult> =>
  request(
    'POST',
    '/api/v2/query/ast',
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostQueryAstResult>

export interface GetQuerySuggestionsParams {
  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetQuerySuggestionsResult =
  | GetQuerySuggestionsOKResult
  | GetQuerySuggestionsMovedPermanentlyResult
  | GetQuerySuggestionsDefaultResult

interface GetQuerySuggestionsOKResult {
  status: 200
  headers: Headers
  data: FluxSuggestions
}

interface GetQuerySuggestionsMovedPermanentlyResult {
  status: 301
  headers: Headers
  data: {
    readonly body?: string
  }
}

interface GetQuerySuggestionsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getQuerySuggestions = (
  params: GetQuerySuggestionsParams,
  options: RequestOptions = {}
): Promise<GetQuerySuggestionsResult> =>
  request(
    'GET',
    '/api/v2/query/suggestions',
    params,
    options
  ) as Promise<GetQuerySuggestionsResult>

export interface GetQuerySuggestionParams {
  name: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetQuerySuggestionResult =
  | GetQuerySuggestionOKResult
  | GetQuerySuggestionInternalServerErrorResult

interface GetQuerySuggestionOKResult {
  status: 200
  headers: Headers
  data: FluxSuggestion
}

interface GetQuerySuggestionInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const getQuerySuggestion = (
  params: GetQuerySuggestionParams,
  options: RequestOptions = {}
): Promise<GetQuerySuggestionResult> =>
  request(
    'GET',
    `/api/v2/query/suggestions/${params.name}`,
    params,
    options
  ) as Promise<GetQuerySuggestionResult>

export interface PostQueryAnalyzeParams {
  data?: Query

  headers?: {
    'Zap-Trace-Span'?: string
    'Content-Type'?: string
  }
}

type PostQueryAnalyzeResult =
  | PostQueryAnalyzeOKResult
  | PostQueryAnalyzeBadRequestResult
  | PostQueryAnalyzeDefaultResult

interface PostQueryAnalyzeOKResult {
  status: 200
  headers: Headers
  data: AnalyzeQueryResponse
}

interface PostQueryAnalyzeBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostQueryAnalyzeDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postQueryAnalyze = (
  params: PostQueryAnalyzeParams,
  options: RequestOptions = {}
): Promise<PostQueryAnalyzeResult> =>
  request(
    'POST',
    '/api/v2/query/analyze',
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostQueryAnalyzeResult>

export interface PostQueryParams {
  data?: Query

  query?: {
    org?: string
    orgID?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
    'Accept-Encoding'?: string
    'Content-Type'?: string
  }
}

type PostQueryResult =
  | PostQueryOKResult
  | PostQueryBadRequestResult
  | PostQueryUnauthorizedResult
  | PostQueryNotFoundResult
  | PostQueryTooManyRequestsResult
  | PostQueryInternalServerErrorResult
  | PostQueryDefaultResult

interface PostQueryOKResult {
  status: 200
  headers: Headers
  data: string
}

interface PostQueryBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostQueryUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostQueryNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PostQueryTooManyRequestsResult {
  status: 429
  headers: Headers
  data: any
}

interface PostQueryInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostQueryDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postQuery = (
  params: PostQueryParams,
  options: RequestOptions = {}
): Promise<PostQueryResult> =>
  request(
    'POST',
    '/api/v2/query',
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostQueryResult>

export interface GetBucketsParams {
  query?: {
    offset?: number
    limit?: number
    after?: string
    org?: string
    orgID?: string
    name?: string
    id?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetBucketsResult =
  | GetBucketsOKResult
  | GetBucketsUnauthorizedResult
  | GetBucketsInternalServerErrorResult
  | GetBucketsDefaultResult

interface GetBucketsOKResult {
  status: 200
  headers: Headers
  data: Buckets
}

interface GetBucketsUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetBucketsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetBucketsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBuckets = (
  params: GetBucketsParams,
  options: RequestOptions = {}
): Promise<GetBucketsResult> =>
  request(
    'GET',
    '/api/v2/buckets',
    params,
    options
  ) as Promise<GetBucketsResult>

export interface PostBucketParams {
  data: PostBucketRequest

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostBucketResult =
  | PostBucketCreatedResult
  | PostBucketBadRequestResult
  | PostBucketUnauthorizedResult
  | PostBucketForbiddenResult
  | PostBucketUnprocessableEntityResult
  | PostBucketInternalServerErrorResult
  | PostBucketDefaultResult

interface PostBucketCreatedResult {
  status: 201
  headers: Headers
  data: Bucket
}

interface PostBucketBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostBucketUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostBucketForbiddenResult {
  status: 403
  headers: Headers
  data: Error
}

interface PostBucketUnprocessableEntityResult {
  status: 422
  headers: Headers
  data: Error
}

interface PostBucketInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostBucketDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postBucket = (
  params: PostBucketParams,
  options: RequestOptions = {}
): Promise<PostBucketResult> =>
  request(
    'POST',
    '/api/v2/buckets',
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostBucketResult>

export interface GetBucketParams {
  bucketID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetBucketResult =
  | GetBucketOKResult
  | GetBucketUnauthorizedResult
  | GetBucketNotFoundResult
  | GetBucketInternalServerErrorResult
  | GetBucketDefaultResult

interface GetBucketOKResult {
  status: 200
  headers: Headers
  data: Bucket
}

interface GetBucketUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetBucketNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetBucketInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetBucketDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBucket = (
  params: GetBucketParams,
  options: RequestOptions = {}
): Promise<GetBucketResult> =>
  request(
    'GET',
    `/api/v2/buckets/${params.bucketID}`,
    params,
    options
  ) as Promise<GetBucketResult>

export interface PatchBucketParams {
  bucketID: string

  data: PatchBucketRequest

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PatchBucketResult =
  | PatchBucketOKResult
  | PatchBucketBadRequestResult
  | PatchBucketUnauthorizedResult
  | PatchBucketForbiddenResult
  | PatchBucketNotFoundResult
  | PatchBucketInternalServerErrorResult
  | PatchBucketDefaultResult

interface PatchBucketOKResult {
  status: 200
  headers: Headers
  data: Bucket
}

interface PatchBucketBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PatchBucketUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PatchBucketForbiddenResult {
  status: 403
  headers: Headers
  data: Error
}

interface PatchBucketNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PatchBucketInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PatchBucketDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchBucket = (
  params: PatchBucketParams,
  options: RequestOptions = {}
): Promise<PatchBucketResult> =>
  request(
    'PATCH',
    `/api/v2/buckets/${params.bucketID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PatchBucketResult>

export interface DeleteBucketParams {
  bucketID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteBucketResult =
  | DeleteBucketNoContentResult
  | DeleteBucketBadRequestResult
  | DeleteBucketUnauthorizedResult
  | DeleteBucketNotFoundResult
  | DeleteBucketInternalServerErrorResult
  | DeleteBucketDefaultResult

interface DeleteBucketNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteBucketBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface DeleteBucketUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface DeleteBucketNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteBucketInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface DeleteBucketDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteBucket = (
  params: DeleteBucketParams,
  options: RequestOptions = {}
): Promise<DeleteBucketResult> =>
  request(
    'DELETE',
    `/api/v2/buckets/${params.bucketID}`,
    params,
    options
  ) as Promise<DeleteBucketResult>

export interface GetBucketsLabelsParams {
  bucketID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetBucketsLabelsResult =
  | GetBucketsLabelsOKResult
  | GetBucketsLabelsBadRequestResult
  | GetBucketsLabelsUnauthorizedResult
  | GetBucketsLabelsNotFoundResult
  | GetBucketsLabelsInternalServerErrorResult
  | GetBucketsLabelsDefaultResult

interface GetBucketsLabelsOKResult {
  status: 200
  headers: Headers
  data: LabelsResponse
}

interface GetBucketsLabelsBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetBucketsLabelsUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetBucketsLabelsNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetBucketsLabelsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetBucketsLabelsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBucketsLabels = (
  params: GetBucketsLabelsParams,
  options: RequestOptions = {}
): Promise<GetBucketsLabelsResult> =>
  request(
    'GET',
    `/api/v2/buckets/${params.bucketID}/labels`,
    params,
    options
  ) as Promise<GetBucketsLabelsResult>

export interface PostBucketsLabelParams {
  bucketID: string

  data: LabelMapping

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostBucketsLabelResult =
  | PostBucketsLabelCreatedResult
  | PostBucketsLabelBadRequestResult
  | PostBucketsLabelUnauthorizedResult
  | PostBucketsLabelNotFoundResult
  | PostBucketsLabelUnprocessableEntityResult
  | PostBucketsLabelInternalServerErrorResult
  | PostBucketsLabelDefaultResult

interface PostBucketsLabelCreatedResult {
  status: 201
  headers: Headers
  data: LabelResponse
}

interface PostBucketsLabelBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostBucketsLabelUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostBucketsLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PostBucketsLabelUnprocessableEntityResult {
  status: 422
  headers: Headers
  data: Error
}

interface PostBucketsLabelInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostBucketsLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postBucketsLabel = (
  params: PostBucketsLabelParams,
  options: RequestOptions = {}
): Promise<PostBucketsLabelResult> =>
  request(
    'POST',
    `/api/v2/buckets/${params.bucketID}/labels`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostBucketsLabelResult>

export interface DeleteBucketsLabelParams {
  bucketID: string
  labelID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteBucketsLabelResult =
  | DeleteBucketsLabelNoContentResult
  | DeleteBucketsLabelNotFoundResult
  | DeleteBucketsLabelDefaultResult

interface DeleteBucketsLabelNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteBucketsLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteBucketsLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteBucketsLabel = (
  params: DeleteBucketsLabelParams,
  options: RequestOptions = {}
): Promise<DeleteBucketsLabelResult> =>
  request(
    'DELETE',
    `/api/v2/buckets/${params.bucketID}/labels/${params.labelID}`,
    params,
    options
  ) as Promise<DeleteBucketsLabelResult>

export interface GetBucketsMembersParams {
  bucketID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetBucketsMembersResult =
  | GetBucketsMembersOKResult
  | GetBucketsMembersBadRequestResult
  | GetBucketsMembersUnauthorizedResult
  | GetBucketsMembersNotFoundResult
  | GetBucketsMembersInternalServerErrorResult
  | GetBucketsMembersDefaultResult

interface GetBucketsMembersOKResult {
  status: 200
  headers: Headers
  data: ResourceMembers
}

interface GetBucketsMembersBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetBucketsMembersUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetBucketsMembersNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetBucketsMembersInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetBucketsMembersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBucketsMembers = (
  params: GetBucketsMembersParams,
  options: RequestOptions = {}
): Promise<GetBucketsMembersResult> =>
  request(
    'GET',
    `/api/v2/buckets/${params.bucketID}/members`,
    params,
    options
  ) as Promise<GetBucketsMembersResult>

export interface PostBucketsMemberParams {
  bucketID: string

  data: AddResourceMemberRequestBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostBucketsMemberResult =
  | PostBucketsMemberCreatedResult
  | PostBucketsMemberBadRequestResult
  | PostBucketsMemberUnauthorizedResult
  | PostBucketsMemberNotFoundResult
  | PostBucketsMemberInternalServerErrorResult
  | PostBucketsMemberDefaultResult

interface PostBucketsMemberCreatedResult {
  status: 201
  headers: Headers
  data: ResourceMember
}

interface PostBucketsMemberBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostBucketsMemberUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostBucketsMemberNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PostBucketsMemberInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostBucketsMemberDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postBucketsMember = (
  params: PostBucketsMemberParams,
  options: RequestOptions = {}
): Promise<PostBucketsMemberResult> =>
  request(
    'POST',
    `/api/v2/buckets/${params.bucketID}/members`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostBucketsMemberResult>

export interface DeleteBucketsMemberParams {
  userID: string
  bucketID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteBucketsMemberResult =
  | DeleteBucketsMemberNoContentResult
  | DeleteBucketsMemberUnauthorizedResult
  | DeleteBucketsMemberNotFoundResult
  | DeleteBucketsMemberInternalServerErrorResult
  | DeleteBucketsMemberDefaultResult

interface DeleteBucketsMemberNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteBucketsMemberUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface DeleteBucketsMemberNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteBucketsMemberInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface DeleteBucketsMemberDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteBucketsMember = (
  params: DeleteBucketsMemberParams,
  options: RequestOptions = {}
): Promise<DeleteBucketsMemberResult> =>
  request(
    'DELETE',
    `/api/v2/buckets/${params.bucketID}/members/${params.userID}`,
    params,
    options
  ) as Promise<DeleteBucketsMemberResult>

export interface GetBucketsOwnersParams {
  bucketID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetBucketsOwnersResult =
  | GetBucketsOwnersOKResult
  | GetBucketsOwnersDefaultResult

interface GetBucketsOwnersOKResult {
  status: 200
  headers: Headers
  data: ResourceOwners
}

interface GetBucketsOwnersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBucketsOwners = (
  params: GetBucketsOwnersParams,
  options: RequestOptions = {}
): Promise<GetBucketsOwnersResult> =>
  request(
    'GET',
    `/api/v2/buckets/${params.bucketID}/owners`,
    params,
    options
  ) as Promise<GetBucketsOwnersResult>

export interface PostBucketsOwnerParams {
  bucketID: string

  data: AddResourceMemberRequestBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostBucketsOwnerResult =
  | PostBucketsOwnerCreatedResult
  | PostBucketsOwnerDefaultResult

interface PostBucketsOwnerCreatedResult {
  status: 201
  headers: Headers
  data: ResourceOwner
}

interface PostBucketsOwnerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postBucketsOwner = (
  params: PostBucketsOwnerParams,
  options: RequestOptions = {}
): Promise<PostBucketsOwnerResult> =>
  request(
    'POST',
    `/api/v2/buckets/${params.bucketID}/owners`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostBucketsOwnerResult>

export interface DeleteBucketsOwnerParams {
  userID: string
  bucketID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteBucketsOwnerResult =
  | DeleteBucketsOwnerNoContentResult
  | DeleteBucketsOwnerDefaultResult

interface DeleteBucketsOwnerNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteBucketsOwnerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteBucketsOwner = (
  params: DeleteBucketsOwnerParams,
  options: RequestOptions = {}
): Promise<DeleteBucketsOwnerResult> =>
  request(
    'DELETE',
    `/api/v2/buckets/${params.bucketID}/owners/${params.userID}`,
    params,
    options
  ) as Promise<DeleteBucketsOwnerResult>

export interface GetOrgsParams {
  query?: {
    offset?: number
    limit?: number
    descending?: any
    org?: string
    orgID?: string
    userID?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetOrgsResult =
  | GetOrgsOKResult
  | GetOrgsBadRequestResult
  | GetOrgsUnauthorizedResult
  | GetOrgsNotFoundResult
  | GetOrgsInternalServerErrorResult
  | GetOrgsDefaultResult

interface GetOrgsOKResult {
  status: 200
  headers: Headers
  data: Organizations
}

interface GetOrgsBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetOrgsUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetOrgsNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetOrgsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetOrgsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getOrgs = (
  params: GetOrgsParams,
  options: RequestOptions = {}
): Promise<GetOrgsResult> =>
  request('GET', '/api/v2/orgs', params, options) as Promise<GetOrgsResult>

export interface PostOrgParams {
  data: PostOrganizationRequest

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostOrgResult =
  | PostOrgCreatedResult
  | PostOrgBadRequestResult
  | PostOrgUnauthorizedResult
  | PostOrgNotFoundResult
  | PostOrgInternalServerErrorResult
  | PostOrgDefaultResult

interface PostOrgCreatedResult {
  status: 201
  headers: Headers
  data: Organization
}

interface PostOrgBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostOrgUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostOrgNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PostOrgInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostOrgDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postOrg = (
  params: PostOrgParams,
  options: RequestOptions = {}
): Promise<PostOrgResult> =>
  request(
    'POST',
    '/api/v2/orgs',
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostOrgResult>

export interface GetOrgParams {
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetOrgResult =
  | GetOrgOKResult
  | GetOrgUnauthorizedResult
  | GetOrgNotFoundResult
  | GetOrgInternalServerErrorResult
  | GetOrgDefaultResult

interface GetOrgOKResult {
  status: 200
  headers: Headers
  data: Organization
}

interface GetOrgUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetOrgNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetOrgInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetOrgDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getOrg = (
  params: GetOrgParams,
  options: RequestOptions = {}
): Promise<GetOrgResult> =>
  request(
    'GET',
    `/api/v2/orgs/${params.orgID}`,
    params,
    options
  ) as Promise<GetOrgResult>

export interface PatchOrgParams {
  orgID: string

  data: PatchOrganizationRequest

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PatchOrgResult =
  | PatchOrgOKResult
  | PatchOrgBadRequestResult
  | PatchOrgUnauthorizedResult
  | PatchOrgNotFoundResult
  | PatchOrgInternalServerErrorResult
  | PatchOrgDefaultResult

interface PatchOrgOKResult {
  status: 200
  headers: Headers
  data: Organization
}

interface PatchOrgBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PatchOrgUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PatchOrgNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PatchOrgInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PatchOrgDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchOrg = (
  params: PatchOrgParams,
  options: RequestOptions = {}
): Promise<PatchOrgResult> =>
  request(
    'PATCH',
    `/api/v2/orgs/${params.orgID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PatchOrgResult>

export interface DeleteOrgParams {
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteOrgResult =
  | DeleteOrgNoContentResult
  | DeleteOrgBadRequestResult
  | DeleteOrgUnauthorizedResult
  | DeleteOrgNotFoundResult
  | DeleteOrgInternalServerErrorResult
  | DeleteOrgDefaultResult

interface DeleteOrgNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteOrgBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface DeleteOrgUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface DeleteOrgNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteOrgInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface DeleteOrgDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteOrg = (
  params: DeleteOrgParams,
  options: RequestOptions = {}
): Promise<DeleteOrgResult> =>
  request(
    'DELETE',
    `/api/v2/orgs/${params.orgID}`,
    params,
    options
  ) as Promise<DeleteOrgResult>

export interface GetOrgsSecretsParams {
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetOrgsSecretsResult = GetOrgsSecretsOKResult | GetOrgsSecretsDefaultResult

interface GetOrgsSecretsOKResult {
  status: 200
  headers: Headers
  data: SecretKeysResponse
}

interface GetOrgsSecretsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getOrgsSecrets = (
  params: GetOrgsSecretsParams,
  options: RequestOptions = {}
): Promise<GetOrgsSecretsResult> =>
  request(
    'GET',
    `/api/v2/orgs/${params.orgID}/secrets`,
    params,
    options
  ) as Promise<GetOrgsSecretsResult>

export interface PatchOrgsSecretsParams {
  orgID: string

  data: Secrets

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PatchOrgsSecretsResult =
  | PatchOrgsSecretsNoContentResult
  | PatchOrgsSecretsDefaultResult

interface PatchOrgsSecretsNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface PatchOrgsSecretsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchOrgsSecrets = (
  params: PatchOrgsSecretsParams,
  options: RequestOptions = {}
): Promise<PatchOrgsSecretsResult> =>
  request(
    'PATCH',
    `/api/v2/orgs/${params.orgID}/secrets`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PatchOrgsSecretsResult>

export interface GetOrgsMembersParams {
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetOrgsMembersResult =
  | GetOrgsMembersOKResult
  | GetOrgsMembersBadRequestResult
  | GetOrgsMembersUnauthorizedResult
  | GetOrgsMembersNotFoundResult
  | GetOrgsMembersInternalServerErrorResult
  | GetOrgsMembersDefaultResult

interface GetOrgsMembersOKResult {
  status: 200
  headers: Headers
  data: ResourceMembers
}

interface GetOrgsMembersBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetOrgsMembersUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetOrgsMembersNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetOrgsMembersInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetOrgsMembersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getOrgsMembers = (
  params: GetOrgsMembersParams,
  options: RequestOptions = {}
): Promise<GetOrgsMembersResult> =>
  request(
    'GET',
    `/api/v2/orgs/${params.orgID}/members`,
    params,
    options
  ) as Promise<GetOrgsMembersResult>

export interface PostOrgsMemberParams {
  orgID: string

  data: AddResourceMemberRequestBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostOrgsMemberResult =
  | PostOrgsMemberCreatedResult
  | PostOrgsMemberBadRequestResult
  | PostOrgsMemberUnauthorizedResult
  | PostOrgsMemberNotFoundResult
  | PostOrgsMemberInternalServerErrorResult
  | PostOrgsMemberDefaultResult

interface PostOrgsMemberCreatedResult {
  status: 201
  headers: Headers
  data: ResourceMember
}

interface PostOrgsMemberBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostOrgsMemberUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostOrgsMemberNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PostOrgsMemberInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostOrgsMemberDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postOrgsMember = (
  params: PostOrgsMemberParams,
  options: RequestOptions = {}
): Promise<PostOrgsMemberResult> =>
  request(
    'POST',
    `/api/v2/orgs/${params.orgID}/members`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostOrgsMemberResult>

export interface DeleteOrgsMemberParams {
  userID: string
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteOrgsMemberResult =
  | DeleteOrgsMemberNoContentResult
  | DeleteOrgsMemberUnauthorizedResult
  | DeleteOrgsMemberNotFoundResult
  | DeleteOrgsMemberInternalServerErrorResult
  | DeleteOrgsMemberDefaultResult

interface DeleteOrgsMemberNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteOrgsMemberUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface DeleteOrgsMemberNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteOrgsMemberInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface DeleteOrgsMemberDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteOrgsMember = (
  params: DeleteOrgsMemberParams,
  options: RequestOptions = {}
): Promise<DeleteOrgsMemberResult> =>
  request(
    'DELETE',
    `/api/v2/orgs/${params.orgID}/members/${params.userID}`,
    params,
    options
  ) as Promise<DeleteOrgsMemberResult>

export interface GetOrgsOwnersParams {
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetOrgsOwnersResult =
  | GetOrgsOwnersOKResult
  | GetOrgsOwnersNotFoundResult
  | GetOrgsOwnersDefaultResult

interface GetOrgsOwnersOKResult {
  status: 200
  headers: Headers
  data: ResourceOwners
}

interface GetOrgsOwnersNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetOrgsOwnersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getOrgsOwners = (
  params: GetOrgsOwnersParams,
  options: RequestOptions = {}
): Promise<GetOrgsOwnersResult> =>
  request(
    'GET',
    `/api/v2/orgs/${params.orgID}/owners`,
    params,
    options
  ) as Promise<GetOrgsOwnersResult>

export interface PostOrgsOwnerParams {
  orgID: string

  data: AddResourceMemberRequestBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostOrgsOwnerResult =
  | PostOrgsOwnerCreatedResult
  | PostOrgsOwnerBadRequestResult
  | PostOrgsOwnerUnauthorizedResult
  | PostOrgsOwnerNotFoundResult
  | PostOrgsOwnerInternalServerErrorResult
  | PostOrgsOwnerDefaultResult

interface PostOrgsOwnerCreatedResult {
  status: 201
  headers: Headers
  data: ResourceOwner
}

interface PostOrgsOwnerBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostOrgsOwnerUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostOrgsOwnerNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PostOrgsOwnerInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostOrgsOwnerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postOrgsOwner = (
  params: PostOrgsOwnerParams,
  options: RequestOptions = {}
): Promise<PostOrgsOwnerResult> =>
  request(
    'POST',
    `/api/v2/orgs/${params.orgID}/owners`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostOrgsOwnerResult>

export interface DeleteOrgsOwnerParams {
  userID: string
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteOrgsOwnerResult =
  | DeleteOrgsOwnerNoContentResult
  | DeleteOrgsOwnerUnauthorizedResult
  | DeleteOrgsOwnerNotFoundResult
  | DeleteOrgsOwnerInternalServerErrorResult
  | DeleteOrgsOwnerDefaultResult

interface DeleteOrgsOwnerNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteOrgsOwnerUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface DeleteOrgsOwnerNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteOrgsOwnerInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface DeleteOrgsOwnerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteOrgsOwner = (
  params: DeleteOrgsOwnerParams,
  options: RequestOptions = {}
): Promise<DeleteOrgsOwnerResult> =>
  request(
    'DELETE',
    `/api/v2/orgs/${params.orgID}/owners/${params.userID}`,
    params,
    options
  ) as Promise<DeleteOrgsOwnerResult>

export interface PostOrgsSecretsDeleteParams {
  orgID: string

  data: SecretKeys

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostOrgsSecretsDeleteResult =
  | PostOrgsSecretsDeleteNoContentResult
  | PostOrgsSecretsDeleteDefaultResult

interface PostOrgsSecretsDeleteNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface PostOrgsSecretsDeleteDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postOrgsSecretsDelete = (
  params: PostOrgsSecretsDeleteParams,
  options: RequestOptions = {}
): Promise<PostOrgsSecretsDeleteResult> =>
  request(
    'POST',
    `/api/v2/orgs/${params.orgID}/secrets/delete`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostOrgsSecretsDeleteResult>

export interface DeleteOrgsSecretParams {
  orgID: string
  secretID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteOrgsSecretResult =
  | DeleteOrgsSecretNoContentResult
  | DeleteOrgsSecretDefaultResult

interface DeleteOrgsSecretNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteOrgsSecretDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteOrgsSecret = (
  params: DeleteOrgsSecretParams,
  options: RequestOptions = {}
): Promise<DeleteOrgsSecretResult> =>
  request(
    'DELETE',
    `/api/v2/orgs/${params.orgID}/secrets/${params.secretID}`,
    params,
    options
  ) as Promise<DeleteOrgsSecretResult>

export interface GetResourcesParams {
  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetResourcesResult = GetResourcesOKResult | GetResourcesDefaultResult

interface GetResourcesOKResult {
  status: 200
  headers: Headers
  data: string[]
}

interface GetResourcesDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getResources = (
  params: GetResourcesParams,
  options: RequestOptions = {}
): Promise<GetResourcesResult> =>
  request(
    'GET',
    '/api/v2/resources',
    params,
    options
  ) as Promise<GetResourcesResult>

export interface GetStacksParams {
  query: {
    orgID: string
    name?: string
    stackID?: string
  }
}

type GetStacksResult =
  | GetStacksOKResult
  | GetStacksBadRequestResult
  | GetStacksUnauthorizedResult
  | GetStacksInternalServerErrorResult
  | GetStacksDefaultResult

interface GetStacksOKResult {
  status: 200
  headers: Headers
  data: {
    stacks?: Stack[]
  }
}

interface GetStacksBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetStacksUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetStacksInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetStacksDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getStacks = (
  params: GetStacksParams,
  options: RequestOptions = {}
): Promise<GetStacksResult> =>
  request('GET', '/api/v2/stacks', params, options) as Promise<GetStacksResult>

export interface PostStackParams {
  data: {
    orgID?: string
    name?: string
    description?: string
    urls?: string[]
  }
}

type PostStackResult =
  | PostStackCreatedResult
  | PostStackUnauthorizedResult
  | PostStackUnprocessableEntityResult
  | PostStackInternalServerErrorResult
  | PostStackDefaultResult

interface PostStackCreatedResult {
  status: 201
  headers: Headers
  data: Stack
}

interface PostStackUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostStackUnprocessableEntityResult {
  status: 422
  headers: Headers
  data: Error
}

interface PostStackInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostStackDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postStack = (
  params: PostStackParams,
  options: RequestOptions = {}
): Promise<PostStackResult> =>
  request(
    'POST',
    '/api/v2/stacks',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostStackResult>

export interface GetStackParams {
  stack_id: string
}

type GetStackResult = GetStackOKResult | GetStackDefaultResult

interface GetStackOKResult {
  status: 200
  headers: Headers
  data: Stack
}

interface GetStackDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getStack = (
  params: GetStackParams,
  options: RequestOptions = {}
): Promise<GetStackResult> =>
  request(
    'GET',
    `/api/v2/stacks/${params.stack_id}`,
    params,
    options
  ) as Promise<GetStackResult>

export interface PatchStackParams {
  stack_id: string

  data: {
    name?: string
    description?: string
    templateURLs?: string[]
    additionalResources?: Array<{
      resourceID: string
      kind: string
      templateMetaName?: string
    }>
  }
}

type PatchStackResult = PatchStackOKResult | PatchStackDefaultResult

interface PatchStackOKResult {
  status: 200
  headers: Headers
  data: Stack
}

interface PatchStackDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchStack = (
  params: PatchStackParams,
  options: RequestOptions = {}
): Promise<PatchStackResult> =>
  request(
    'PATCH',
    `/api/v2/stacks/${params.stack_id}`,
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PatchStackResult>

export interface DeleteStackParams {
  stack_id: string

  query: {
    orgID: string
  }
}

type DeleteStackResult = DeleteStackNoContentResult | DeleteStackDefaultResult

interface DeleteStackNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteStackDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteStack = (
  params: DeleteStackParams,
  options: RequestOptions = {}
): Promise<DeleteStackResult> =>
  request(
    'DELETE',
    `/api/v2/stacks/${params.stack_id}`,
    params,
    options
  ) as Promise<DeleteStackResult>

export interface PostStacksUninstallParams {
  stack_id: string
}

type PostStacksUninstallResult =
  | PostStacksUninstallOKResult
  | PostStacksUninstallDefaultResult

interface PostStacksUninstallOKResult {
  status: 200
  headers: Headers
  data: Stack
}

interface PostStacksUninstallDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postStacksUninstall = (
  params: PostStacksUninstallParams,
  options: RequestOptions = {}
): Promise<PostStacksUninstallResult> =>
  request(
    'POST',
    `/api/v2/stacks/${params.stack_id}/uninstall`,
    params,
    options
  ) as Promise<PostStacksUninstallResult>

export interface PostTemplatesApplyParams {
  data: TemplateApply
}

type PostTemplatesApplyResult =
  | PostTemplatesApplyOKResult
  | PostTemplatesApplyCreatedResult
  | PostTemplatesApplyUnprocessableEntityResult
  | PostTemplatesApplyInternalServerErrorResult
  | PostTemplatesApplyDefaultResult

interface PostTemplatesApplyOKResult {
  status: 200
  headers: Headers
  data: TemplateSummary
}

interface PostTemplatesApplyCreatedResult {
  status: 201
  headers: Headers
  data: TemplateSummary
}

interface PostTemplatesApplyUnprocessableEntityResult {
  status: 422
  headers: Headers
  data: TemplateSummary & {
    message: string
    code: string
  }
}

interface PostTemplatesApplyInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostTemplatesApplyDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postTemplatesApply = (
  params: PostTemplatesApplyParams,
  options: RequestOptions = {}
): Promise<PostTemplatesApplyResult> =>
  request(
    'POST',
    '/api/v2/templates/apply',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostTemplatesApplyResult>

export interface PostTemplatesExportParams {
  data?: TemplateExportByID | TemplateExportByName
}

type PostTemplatesExportResult =
  | PostTemplatesExportOKResult
  | PostTemplatesExportDefaultResult

interface PostTemplatesExportOKResult {
  status: 200
  headers: Headers
  data: Template
}

interface PostTemplatesExportDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postTemplatesExport = (
  params: PostTemplatesExportParams,
  options: RequestOptions = {}
): Promise<PostTemplatesExportResult> =>
  request(
    'POST',
    '/api/v2/templates/export',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostTemplatesExportResult>

export interface GetTasksRunsParams {
  taskID: string

  query?: {
    after?: string
    limit?: number
    afterTime?: string
    beforeTime?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTasksRunsResult =
  | GetTasksRunsOKResult
  | GetTasksRunsUnauthorizedResult
  | GetTasksRunsInternalServerErrorResult
  | GetTasksRunsDefaultResult

interface GetTasksRunsOKResult {
  status: 200
  headers: Headers
  data: Runs
}

interface GetTasksRunsUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetTasksRunsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetTasksRunsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTasksRuns = (
  params: GetTasksRunsParams,
  options: RequestOptions = {}
): Promise<GetTasksRunsResult> =>
  request(
    'GET',
    `/api/v2/tasks/${params.taskID}/runs`,
    params,
    options
  ) as Promise<GetTasksRunsResult>

export interface PostTasksRunParams {
  taskID: string

  data?: RunManually

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostTasksRunResult =
  | PostTasksRunCreatedResult
  | PostTasksRunUnauthorizedResult
  | PostTasksRunInternalServerErrorResult
  | PostTasksRunDefaultResult

interface PostTasksRunCreatedResult {
  status: 201
  headers: Headers
  data: Run
}

interface PostTasksRunUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostTasksRunInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostTasksRunDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postTasksRun = (
  params: PostTasksRunParams,
  options: RequestOptions = {}
): Promise<PostTasksRunResult> =>
  request(
    'POST',
    `/api/v2/tasks/${params.taskID}/runs`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostTasksRunResult>

export interface GetTasksRunParams {
  taskID: string
  runID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTasksRunResult =
  | GetTasksRunOKResult
  | GetTasksRunBadRequestResult
  | GetTasksRunUnauthorizedResult
  | GetTasksRunNotFoundResult
  | GetTasksRunInternalServerErrorResult
  | GetTasksRunDefaultResult

interface GetTasksRunOKResult {
  status: 200
  headers: Headers
  data: Run
}

interface GetTasksRunBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetTasksRunUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetTasksRunNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetTasksRunInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetTasksRunDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTasksRun = (
  params: GetTasksRunParams,
  options: RequestOptions = {}
): Promise<GetTasksRunResult> =>
  request(
    'GET',
    `/api/v2/tasks/${params.taskID}/runs/${params.runID}`,
    params,
    options
  ) as Promise<GetTasksRunResult>

export interface DeleteTasksRunParams {
  taskID: string
  runID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteTasksRunResult =
  | DeleteTasksRunNoContentResult
  | DeleteTasksRunBadRequestResult
  | DeleteTasksRunUnauthorizedResult
  | DeleteTasksRunNotFoundResult
  | DeleteTasksRunMethodNotAllowedResult
  | DeleteTasksRunInternalServerErrorResult
  | DeleteTasksRunDefaultResult

interface DeleteTasksRunNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteTasksRunBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface DeleteTasksRunUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface DeleteTasksRunNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteTasksRunMethodNotAllowedResult {
  status: 405
  headers: Headers
  data: Error
}

interface DeleteTasksRunInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface DeleteTasksRunDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteTasksRun = (
  params: DeleteTasksRunParams,
  options: RequestOptions = {}
): Promise<DeleteTasksRunResult> =>
  request(
    'DELETE',
    `/api/v2/tasks/${params.taskID}/runs/${params.runID}`,
    params,
    options
  ) as Promise<DeleteTasksRunResult>

export interface PostTasksRunsRetryParams {
  taskID: string
  runID: string

  data?: any

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostTasksRunsRetryResult =
  | PostTasksRunsRetryOKResult
  | PostTasksRunsRetryBadRequestResult
  | PostTasksRunsRetryUnauthorizedResult
  | PostTasksRunsRetryNotFoundResult
  | PostTasksRunsRetryInternalServerErrorResult
  | PostTasksRunsRetryDefaultResult

interface PostTasksRunsRetryOKResult {
  status: 200
  headers: Headers
  data: Run
}

interface PostTasksRunsRetryBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostTasksRunsRetryUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostTasksRunsRetryNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PostTasksRunsRetryInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostTasksRunsRetryDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postTasksRunsRetry = (
  params: PostTasksRunsRetryParams,
  options: RequestOptions = {}
): Promise<PostTasksRunsRetryResult> =>
  request(
    'POST',
    `/api/v2/tasks/${params.taskID}/runs/${params.runID}/retry`,
    {
      ...params,
      headers: {
        ...params.headers,
        'Content-Type': 'application/json; charset=utf-8',
      },
    },
    options
  ) as Promise<PostTasksRunsRetryResult>

export interface GetTasksLogsParams {
  taskID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTasksLogsResult =
  | GetTasksLogsOKResult
  | GetTasksLogsBadRequestResult
  | GetTasksLogsUnauthorizedResult
  | GetTasksLogsNotFoundResult
  | GetTasksLogsInternalServerErrorResult
  | GetTasksLogsDefaultResult

interface GetTasksLogsOKResult {
  status: 200
  headers: Headers
  data: Logs
}

interface GetTasksLogsBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetTasksLogsUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetTasksLogsNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetTasksLogsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetTasksLogsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTasksLogs = (
  params: GetTasksLogsParams,
  options: RequestOptions = {}
): Promise<GetTasksLogsResult> =>
  request(
    'GET',
    `/api/v2/tasks/${params.taskID}/logs`,
    params,
    options
  ) as Promise<GetTasksLogsResult>

export interface GetTasksRunsLogsParams {
  taskID: string
  runID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTasksRunsLogsResult =
  | GetTasksRunsLogsOKResult
  | GetTasksRunsLogsBadRequestResult
  | GetTasksRunsLogsUnauthorizedResult
  | GetTasksRunsLogsNotFoundResult
  | GetTasksRunsLogsInternalServerErrorResult
  | GetTasksRunsLogsDefaultResult

interface GetTasksRunsLogsOKResult {
  status: 200
  headers: Headers
  data: Logs
}

interface GetTasksRunsLogsBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetTasksRunsLogsUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetTasksRunsLogsNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetTasksRunsLogsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetTasksRunsLogsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTasksRunsLogs = (
  params: GetTasksRunsLogsParams,
  options: RequestOptions = {}
): Promise<GetTasksRunsLogsResult> =>
  request(
    'GET',
    `/api/v2/tasks/${params.taskID}/runs/${params.runID}/logs`,
    params,
    options
  ) as Promise<GetTasksRunsLogsResult>

export interface GetTasksLabelsParams {
  taskID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTasksLabelsResult =
  | GetTasksLabelsOKResult
  | GetTasksLabelsBadRequestResult
  | GetTasksLabelsUnauthorizedResult
  | GetTasksLabelsNotFoundResult
  | GetTasksLabelsInternalServerErrorResult
  | GetTasksLabelsDefaultResult

interface GetTasksLabelsOKResult {
  status: 200
  headers: Headers
  data: LabelsResponse
}

interface GetTasksLabelsBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetTasksLabelsUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetTasksLabelsNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetTasksLabelsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetTasksLabelsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTasksLabels = (
  params: GetTasksLabelsParams,
  options: RequestOptions = {}
): Promise<GetTasksLabelsResult> =>
  request(
    'GET',
    `/api/v2/tasks/${params.taskID}/labels`,
    params,
    options
  ) as Promise<GetTasksLabelsResult>

export interface PostTasksLabelParams {
  taskID: string

  data: LabelMapping

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostTasksLabelResult =
  | PostTasksLabelCreatedResult
  | PostTasksLabelBadRequestResult
  | PostTasksLabelUnauthorizedResult
  | PostTasksLabelNotFoundResult
  | PostTasksLabelInternalServerErrorResult
  | PostTasksLabelDefaultResult

interface PostTasksLabelCreatedResult {
  status: 201
  headers: Headers
  data: LabelResponse
}

interface PostTasksLabelBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostTasksLabelUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostTasksLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PostTasksLabelInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostTasksLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postTasksLabel = (
  params: PostTasksLabelParams,
  options: RequestOptions = {}
): Promise<PostTasksLabelResult> =>
  request(
    'POST',
    `/api/v2/tasks/${params.taskID}/labels`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostTasksLabelResult>

export interface DeleteTasksLabelParams {
  taskID: string
  labelID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteTasksLabelResult =
  | DeleteTasksLabelNoContentResult
  | DeleteTasksLabelBadRequestResult
  | DeleteTasksLabelUnauthorizedResult
  | DeleteTasksLabelNotFoundResult
  | DeleteTasksLabelInternalServerErrorResult
  | DeleteTasksLabelDefaultResult

interface DeleteTasksLabelNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteTasksLabelBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface DeleteTasksLabelUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface DeleteTasksLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteTasksLabelInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface DeleteTasksLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteTasksLabel = (
  params: DeleteTasksLabelParams,
  options: RequestOptions = {}
): Promise<DeleteTasksLabelResult> =>
  request(
    'DELETE',
    `/api/v2/tasks/${params.taskID}/labels/${params.labelID}`,
    params,
    options
  ) as Promise<DeleteTasksLabelResult>

export interface GetFlagsParams {
  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetFlagsResult = GetFlagsOKResult | GetFlagsDefaultResult

interface GetFlagsOKResult {
  status: 200
  headers: Headers
  data: Flags
}

interface GetFlagsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getFlags = (
  params: GetFlagsParams,
  options: RequestOptions = {}
): Promise<GetFlagsResult> =>
  request('GET', '/api/v2/flags', params, options) as Promise<GetFlagsResult>

export interface GetMeParams {
  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetMeResult =
  | GetMeOKResult
  | GetMeUnauthorizedResult
  | GetMeInternalServerErrorResult
  | GetMeDefaultResult

interface GetMeOKResult {
  status: 200
  headers: Headers
  data: UserResponse
}

interface GetMeUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetMeInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetMeDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getMe = (
  params: GetMeParams,
  options: RequestOptions = {}
): Promise<GetMeResult> =>
  request('GET', '/api/v2/me', params, options) as Promise<GetMeResult>

export interface PutMePasswordParams {
  data: PasswordResetBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PutMePasswordResult =
  | PutMePasswordNoContentResult
  | PutMePasswordBadRequestResult
  | PutMePasswordDefaultResult

interface PutMePasswordNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface PutMePasswordBadRequestResult {
  status: 400
  headers: Headers
  data: any
}

interface PutMePasswordDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const putMePassword = (
  params: PutMePasswordParams,
  options: RequestOptions = {}
): Promise<PutMePasswordResult> =>
  request(
    'PUT',
    '/api/v2/me/password',
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PutMePasswordResult>

export interface GetTasksMembersParams {
  taskID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTasksMembersResult =
  | GetTasksMembersOKResult
  | GetTasksMembersDefaultResult

interface GetTasksMembersOKResult {
  status: 200
  headers: Headers
  data: ResourceMembers
}

interface GetTasksMembersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTasksMembers = (
  params: GetTasksMembersParams,
  options: RequestOptions = {}
): Promise<GetTasksMembersResult> =>
  request(
    'GET',
    `/api/v2/tasks/${params.taskID}/members`,
    params,
    options
  ) as Promise<GetTasksMembersResult>

export interface PostTasksMemberParams {
  taskID: string

  data: AddResourceMemberRequestBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostTasksMemberResult =
  | PostTasksMemberCreatedResult
  | PostTasksMemberDefaultResult

interface PostTasksMemberCreatedResult {
  status: 201
  headers: Headers
  data: ResourceMember
}

interface PostTasksMemberDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postTasksMember = (
  params: PostTasksMemberParams,
  options: RequestOptions = {}
): Promise<PostTasksMemberResult> =>
  request(
    'POST',
    `/api/v2/tasks/${params.taskID}/members`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostTasksMemberResult>

export interface DeleteTasksMemberParams {
  userID: string
  taskID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteTasksMemberResult =
  | DeleteTasksMemberNoContentResult
  | DeleteTasksMemberDefaultResult

interface DeleteTasksMemberNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteTasksMemberDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteTasksMember = (
  params: DeleteTasksMemberParams,
  options: RequestOptions = {}
): Promise<DeleteTasksMemberResult> =>
  request(
    'DELETE',
    `/api/v2/tasks/${params.taskID}/members/${params.userID}`,
    params,
    options
  ) as Promise<DeleteTasksMemberResult>

export interface GetTasksOwnersParams {
  taskID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetTasksOwnersResult =
  | GetTasksOwnersOKResult
  | GetTasksOwnersUnauthorizedResult
  | GetTasksOwnersUnprocessableEntityResult
  | GetTasksOwnersInternalServerErrorResult
  | GetTasksOwnersDefaultResult

interface GetTasksOwnersOKResult {
  status: 200
  headers: Headers
  data: ResourceOwners
}

interface GetTasksOwnersUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface GetTasksOwnersUnprocessableEntityResult {
  status: 422
  headers: Headers
  data: Error
}

interface GetTasksOwnersInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface GetTasksOwnersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getTasksOwners = (
  params: GetTasksOwnersParams,
  options: RequestOptions = {}
): Promise<GetTasksOwnersResult> =>
  request(
    'GET',
    `/api/v2/tasks/${params.taskID}/owners`,
    params,
    options
  ) as Promise<GetTasksOwnersResult>

export interface PostTasksOwnerParams {
  taskID: string

  data: AddResourceMemberRequestBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostTasksOwnerResult =
  | PostTasksOwnerCreatedResult
  | PostTasksOwnerUnauthorizedResult
  | PostTasksOwnerUnprocessableEntityResult
  | PostTasksOwnerInternalServerErrorResult
  | PostTasksOwnerDefaultResult

interface PostTasksOwnerCreatedResult {
  status: 201
  headers: Headers
  data: ResourceOwner
}

interface PostTasksOwnerUnauthorizedResult {
  status: 401
  headers: Headers
  data: {
    readonly code?: 'unauthorized'
    readonly message?: string
  }
}

interface PostTasksOwnerUnprocessableEntityResult {
  status: 422
  headers: Headers
  data: Error
}

interface PostTasksOwnerInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

interface PostTasksOwnerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postTasksOwner = (
  params: PostTasksOwnerParams,
  options: RequestOptions = {}
): Promise<PostTasksOwnerResult> =>
  request(
    'POST',
    `/api/v2/tasks/${params.taskID}/owners`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostTasksOwnerResult>

export interface DeleteTasksOwnerParams {
  userID: string
  taskID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteTasksOwnerResult =
  | DeleteTasksOwnerNoContentResult
  | DeleteTasksOwnerDefaultResult

interface DeleteTasksOwnerNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteTasksOwnerDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteTasksOwner = (
  params: DeleteTasksOwnerParams,
  options: RequestOptions = {}
): Promise<DeleteTasksOwnerResult> =>
  request(
    'DELETE',
    `/api/v2/tasks/${params.taskID}/owners/${params.userID}`,
    params,
    options
  ) as Promise<DeleteTasksOwnerResult>

export interface PostUsersPasswordParams {
  userID: string

  data: PasswordResetBody

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostUsersPasswordResult =
  | PostUsersPasswordNoContentResult
  | PostUsersPasswordBadRequestResult
  | PostUsersPasswordDefaultResult

interface PostUsersPasswordNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface PostUsersPasswordBadRequestResult {
  status: 400
  headers: Headers
  data: any
}

interface PostUsersPasswordDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postUsersPassword = (
  params: PostUsersPasswordParams,
  options: RequestOptions = {}
): Promise<PostUsersPasswordResult> =>
  request(
    'POST',
    `/api/v2/users/${params.userID}/password`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostUsersPasswordResult>

export interface GetChecksParams {
  query: {
    offset?: number
    limit?: number
    orgID: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetChecksResult = GetChecksOKResult | GetChecksDefaultResult

interface GetChecksOKResult {
  status: 200
  headers: Headers
  data: Checks
}

interface GetChecksDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getChecks = (
  params: GetChecksParams,
  options: RequestOptions = {}
): Promise<GetChecksResult> =>
  request('GET', '/api/v2/checks', params, options) as Promise<GetChecksResult>

export interface PostCheckParams {
  data: PostCheck
}

type PostCheckResult = PostCheckCreatedResult | PostCheckDefaultResult

interface PostCheckCreatedResult {
  status: 201
  headers: Headers
  data: Check
}

interface PostCheckDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postCheck = (
  params: PostCheckParams,
  options: RequestOptions = {}
): Promise<PostCheckResult> =>
  request(
    'POST',
    '/api/v2/checks',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostCheckResult>

export interface GetCheckParams {
  checkID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetCheckResult = GetCheckOKResult | GetCheckDefaultResult

interface GetCheckOKResult {
  status: 200
  headers: Headers
  data: Check
}

interface GetCheckDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getCheck = (
  params: GetCheckParams,
  options: RequestOptions = {}
): Promise<GetCheckResult> =>
  request(
    'GET',
    `/api/v2/checks/${params.checkID}`,
    params,
    options
  ) as Promise<GetCheckResult>

export interface PutCheckParams {
  checkID: string

  data: Check

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PutCheckResult =
  | PutCheckOKResult
  | PutCheckNotFoundResult
  | PutCheckDefaultResult

interface PutCheckOKResult {
  status: 200
  headers: Headers
  data: Check
}

interface PutCheckNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PutCheckDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const putCheck = (
  params: PutCheckParams,
  options: RequestOptions = {}
): Promise<PutCheckResult> =>
  request(
    'PUT',
    `/api/v2/checks/${params.checkID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PutCheckResult>

export interface PatchCheckParams {
  checkID: string

  data: CheckPatch

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PatchCheckResult =
  | PatchCheckOKResult
  | PatchCheckNotFoundResult
  | PatchCheckDefaultResult

interface PatchCheckOKResult {
  status: 200
  headers: Headers
  data: Check
}

interface PatchCheckNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PatchCheckDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchCheck = (
  params: PatchCheckParams,
  options: RequestOptions = {}
): Promise<PatchCheckResult> =>
  request(
    'PATCH',
    `/api/v2/checks/${params.checkID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PatchCheckResult>

export interface DeleteCheckParams {
  checkID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteCheckResult =
  | DeleteCheckNoContentResult
  | DeleteCheckNotFoundResult
  | DeleteCheckDefaultResult

interface DeleteCheckNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteCheckNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteCheckDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteCheck = (
  params: DeleteCheckParams,
  options: RequestOptions = {}
): Promise<DeleteCheckResult> =>
  request(
    'DELETE',
    `/api/v2/checks/${params.checkID}`,
    params,
    options
  ) as Promise<DeleteCheckResult>

export interface GetChecksLabelsParams {
  checkID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetChecksLabelsResult =
  | GetChecksLabelsOKResult
  | GetChecksLabelsDefaultResult

interface GetChecksLabelsOKResult {
  status: 200
  headers: Headers
  data: LabelsResponse
}

interface GetChecksLabelsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getChecksLabels = (
  params: GetChecksLabelsParams,
  options: RequestOptions = {}
): Promise<GetChecksLabelsResult> =>
  request(
    'GET',
    `/api/v2/checks/${params.checkID}/labels`,
    params,
    options
  ) as Promise<GetChecksLabelsResult>

export interface PostChecksLabelParams {
  checkID: string

  data: LabelMapping

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostChecksLabelResult =
  | PostChecksLabelCreatedResult
  | PostChecksLabelDefaultResult

interface PostChecksLabelCreatedResult {
  status: 201
  headers: Headers
  data: LabelResponse
}

interface PostChecksLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postChecksLabel = (
  params: PostChecksLabelParams,
  options: RequestOptions = {}
): Promise<PostChecksLabelResult> =>
  request(
    'POST',
    `/api/v2/checks/${params.checkID}/labels`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostChecksLabelResult>

export interface DeleteChecksLabelParams {
  checkID: string
  labelID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteChecksLabelResult =
  | DeleteChecksLabelNoContentResult
  | DeleteChecksLabelNotFoundResult
  | DeleteChecksLabelDefaultResult

interface DeleteChecksLabelNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteChecksLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteChecksLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteChecksLabel = (
  params: DeleteChecksLabelParams,
  options: RequestOptions = {}
): Promise<DeleteChecksLabelResult> =>
  request(
    'DELETE',
    `/api/v2/checks/${params.checkID}/labels/${params.labelID}`,
    params,
    options
  ) as Promise<DeleteChecksLabelResult>

export interface GetNotificationRulesParams {
  query: {
    offset?: number
    limit?: number
    orgID: string
    checkID?: string
    tag?: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetNotificationRulesResult =
  | GetNotificationRulesOKResult
  | GetNotificationRulesDefaultResult

interface GetNotificationRulesOKResult {
  status: 200
  headers: Headers
  data: NotificationRules
}

interface GetNotificationRulesDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getNotificationRules = (
  params: GetNotificationRulesParams,
  options: RequestOptions = {}
): Promise<GetNotificationRulesResult> =>
  request(
    'GET',
    '/api/v2/notificationRules',
    params,
    options
  ) as Promise<GetNotificationRulesResult>

export interface PostNotificationRuleParams {
  data: PostNotificationRule
}

type PostNotificationRuleResult =
  | PostNotificationRuleCreatedResult
  | PostNotificationRuleDefaultResult

interface PostNotificationRuleCreatedResult {
  status: 201
  headers: Headers
  data: NotificationRule
}

interface PostNotificationRuleDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postNotificationRule = (
  params: PostNotificationRuleParams,
  options: RequestOptions = {}
): Promise<PostNotificationRuleResult> =>
  request(
    'POST',
    '/api/v2/notificationRules',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostNotificationRuleResult>

export interface GetChecksQueryParams {
  checkID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetChecksQueryResult =
  | GetChecksQueryOKResult
  | GetChecksQueryBadRequestResult
  | GetChecksQueryNotFoundResult
  | GetChecksQueryDefaultResult

interface GetChecksQueryOKResult {
  status: 200
  headers: Headers
  data: FluxResponse
}

interface GetChecksQueryBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetChecksQueryNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetChecksQueryDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getChecksQuery = (
  params: GetChecksQueryParams,
  options: RequestOptions = {}
): Promise<GetChecksQueryResult> =>
  request(
    'GET',
    `/api/v2/checks/${params.checkID}/query`,
    params,
    options
  ) as Promise<GetChecksQueryResult>

export interface GetNotificationRuleParams {
  ruleID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetNotificationRuleResult =
  | GetNotificationRuleOKResult
  | GetNotificationRuleDefaultResult

interface GetNotificationRuleOKResult {
  status: 200
  headers: Headers
  data: NotificationRule
}

interface GetNotificationRuleDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getNotificationRule = (
  params: GetNotificationRuleParams,
  options: RequestOptions = {}
): Promise<GetNotificationRuleResult> =>
  request(
    'GET',
    `/api/v2/notificationRules/${params.ruleID}`,
    params,
    options
  ) as Promise<GetNotificationRuleResult>

export interface PutNotificationRuleParams {
  ruleID: string

  data: NotificationRule

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PutNotificationRuleResult =
  | PutNotificationRuleOKResult
  | PutNotificationRuleNotFoundResult
  | PutNotificationRuleDefaultResult

interface PutNotificationRuleOKResult {
  status: 200
  headers: Headers
  data: NotificationRule
}

interface PutNotificationRuleNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PutNotificationRuleDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const putNotificationRule = (
  params: PutNotificationRuleParams,
  options: RequestOptions = {}
): Promise<PutNotificationRuleResult> =>
  request(
    'PUT',
    `/api/v2/notificationRules/${params.ruleID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PutNotificationRuleResult>

export interface PatchNotificationRuleParams {
  ruleID: string

  data: NotificationRuleUpdate

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PatchNotificationRuleResult =
  | PatchNotificationRuleOKResult
  | PatchNotificationRuleNotFoundResult
  | PatchNotificationRuleDefaultResult

interface PatchNotificationRuleOKResult {
  status: 200
  headers: Headers
  data: NotificationRule
}

interface PatchNotificationRuleNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PatchNotificationRuleDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchNotificationRule = (
  params: PatchNotificationRuleParams,
  options: RequestOptions = {}
): Promise<PatchNotificationRuleResult> =>
  request(
    'PATCH',
    `/api/v2/notificationRules/${params.ruleID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PatchNotificationRuleResult>

export interface DeleteNotificationRuleParams {
  ruleID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteNotificationRuleResult =
  | DeleteNotificationRuleNoContentResult
  | DeleteNotificationRuleNotFoundResult
  | DeleteNotificationRuleDefaultResult

interface DeleteNotificationRuleNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteNotificationRuleNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteNotificationRuleDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteNotificationRule = (
  params: DeleteNotificationRuleParams,
  options: RequestOptions = {}
): Promise<DeleteNotificationRuleResult> =>
  request(
    'DELETE',
    `/api/v2/notificationRules/${params.ruleID}`,
    params,
    options
  ) as Promise<DeleteNotificationRuleResult>

export interface GetNotificationRulesLabelsParams {
  ruleID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetNotificationRulesLabelsResult =
  | GetNotificationRulesLabelsOKResult
  | GetNotificationRulesLabelsDefaultResult

interface GetNotificationRulesLabelsOKResult {
  status: 200
  headers: Headers
  data: LabelsResponse
}

interface GetNotificationRulesLabelsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getNotificationRulesLabels = (
  params: GetNotificationRulesLabelsParams,
  options: RequestOptions = {}
): Promise<GetNotificationRulesLabelsResult> =>
  request(
    'GET',
    `/api/v2/notificationRules/${params.ruleID}/labels`,
    params,
    options
  ) as Promise<GetNotificationRulesLabelsResult>

export interface PostNotificationRulesLabelParams {
  ruleID: string

  data: LabelMapping

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostNotificationRulesLabelResult =
  | PostNotificationRulesLabelCreatedResult
  | PostNotificationRulesLabelDefaultResult

interface PostNotificationRulesLabelCreatedResult {
  status: 201
  headers: Headers
  data: LabelResponse
}

interface PostNotificationRulesLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postNotificationRulesLabel = (
  params: PostNotificationRulesLabelParams,
  options: RequestOptions = {}
): Promise<PostNotificationRulesLabelResult> =>
  request(
    'POST',
    `/api/v2/notificationRules/${params.ruleID}/labels`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostNotificationRulesLabelResult>

export interface DeleteNotificationRulesLabelParams {
  ruleID: string
  labelID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteNotificationRulesLabelResult =
  | DeleteNotificationRulesLabelNoContentResult
  | DeleteNotificationRulesLabelNotFoundResult
  | DeleteNotificationRulesLabelDefaultResult

interface DeleteNotificationRulesLabelNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteNotificationRulesLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteNotificationRulesLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteNotificationRulesLabel = (
  params: DeleteNotificationRulesLabelParams,
  options: RequestOptions = {}
): Promise<DeleteNotificationRulesLabelResult> =>
  request(
    'DELETE',
    `/api/v2/notificationRules/${params.ruleID}/labels/${params.labelID}`,
    params,
    options
  ) as Promise<DeleteNotificationRulesLabelResult>

export interface GetNotificationRulesQueryParams {
  ruleID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetNotificationRulesQueryResult =
  | GetNotificationRulesQueryOKResult
  | GetNotificationRulesQueryBadRequestResult
  | GetNotificationRulesQueryNotFoundResult
  | GetNotificationRulesQueryDefaultResult

interface GetNotificationRulesQueryOKResult {
  status: 200
  headers: Headers
  data: FluxResponse
}

interface GetNotificationRulesQueryBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetNotificationRulesQueryNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface GetNotificationRulesQueryDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getNotificationRulesQuery = (
  params: GetNotificationRulesQueryParams,
  options: RequestOptions = {}
): Promise<GetNotificationRulesQueryResult> =>
  request(
    'GET',
    `/api/v2/notificationRules/${params.ruleID}/query`,
    params,
    options
  ) as Promise<GetNotificationRulesQueryResult>

export interface GetNotificationEndpointsParams {
  query: {
    offset?: number
    limit?: number
    orgID: string
  }

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetNotificationEndpointsResult =
  | GetNotificationEndpointsOKResult
  | GetNotificationEndpointsDefaultResult

interface GetNotificationEndpointsOKResult {
  status: 200
  headers: Headers
  data: NotificationEndpoints
}

interface GetNotificationEndpointsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getNotificationEndpoints = (
  params: GetNotificationEndpointsParams,
  options: RequestOptions = {}
): Promise<GetNotificationEndpointsResult> =>
  request(
    'GET',
    '/api/v2/notificationEndpoints',
    params,
    options
  ) as Promise<GetNotificationEndpointsResult>

export interface PostNotificationEndpointParams {
  data: PostNotificationEndpoint
}

type PostNotificationEndpointResult =
  | PostNotificationEndpointCreatedResult
  | PostNotificationEndpointDefaultResult

interface PostNotificationEndpointCreatedResult {
  status: 201
  headers: Headers
  data: NotificationEndpoint
}

interface PostNotificationEndpointDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postNotificationEndpoint = (
  params: PostNotificationEndpointParams,
  options: RequestOptions = {}
): Promise<PostNotificationEndpointResult> =>
  request(
    'POST',
    '/api/v2/notificationEndpoints',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostNotificationEndpointResult>

export interface GetNotificationEndpointParams {
  endpointID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetNotificationEndpointResult =
  | GetNotificationEndpointOKResult
  | GetNotificationEndpointDefaultResult

interface GetNotificationEndpointOKResult {
  status: 200
  headers: Headers
  data: NotificationEndpoint
}

interface GetNotificationEndpointDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getNotificationEndpoint = (
  params: GetNotificationEndpointParams,
  options: RequestOptions = {}
): Promise<GetNotificationEndpointResult> =>
  request(
    'GET',
    `/api/v2/notificationEndpoints/${params.endpointID}`,
    params,
    options
  ) as Promise<GetNotificationEndpointResult>

export interface PutNotificationEndpointParams {
  endpointID: string

  data: NotificationEndpoint

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PutNotificationEndpointResult =
  | PutNotificationEndpointOKResult
  | PutNotificationEndpointNotFoundResult
  | PutNotificationEndpointDefaultResult

interface PutNotificationEndpointOKResult {
  status: 200
  headers: Headers
  data: NotificationEndpoint
}

interface PutNotificationEndpointNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PutNotificationEndpointDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const putNotificationEndpoint = (
  params: PutNotificationEndpointParams,
  options: RequestOptions = {}
): Promise<PutNotificationEndpointResult> =>
  request(
    'PUT',
    `/api/v2/notificationEndpoints/${params.endpointID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PutNotificationEndpointResult>

export interface PatchNotificationEndpointParams {
  endpointID: string

  data: NotificationEndpointUpdate

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PatchNotificationEndpointResult =
  | PatchNotificationEndpointOKResult
  | PatchNotificationEndpointNotFoundResult
  | PatchNotificationEndpointDefaultResult

interface PatchNotificationEndpointOKResult {
  status: 200
  headers: Headers
  data: NotificationEndpoint
}

interface PatchNotificationEndpointNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface PatchNotificationEndpointDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const patchNotificationEndpoint = (
  params: PatchNotificationEndpointParams,
  options: RequestOptions = {}
): Promise<PatchNotificationEndpointResult> =>
  request(
    'PATCH',
    `/api/v2/notificationEndpoints/${params.endpointID}`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PatchNotificationEndpointResult>

export interface DeleteNotificationEndpointParams {
  endpointID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteNotificationEndpointResult =
  | DeleteNotificationEndpointNoContentResult
  | DeleteNotificationEndpointNotFoundResult
  | DeleteNotificationEndpointDefaultResult

interface DeleteNotificationEndpointNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteNotificationEndpointNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteNotificationEndpointDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteNotificationEndpoint = (
  params: DeleteNotificationEndpointParams,
  options: RequestOptions = {}
): Promise<DeleteNotificationEndpointResult> =>
  request(
    'DELETE',
    `/api/v2/notificationEndpoints/${params.endpointID}`,
    params,
    options
  ) as Promise<DeleteNotificationEndpointResult>

export interface GetNotificationEndpointsLabelsParams {
  endpointID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetNotificationEndpointsLabelsResult =
  | GetNotificationEndpointsLabelsOKResult
  | GetNotificationEndpointsLabelsDefaultResult

interface GetNotificationEndpointsLabelsOKResult {
  status: 200
  headers: Headers
  data: LabelsResponse
}

interface GetNotificationEndpointsLabelsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getNotificationEndpointsLabels = (
  params: GetNotificationEndpointsLabelsParams,
  options: RequestOptions = {}
): Promise<GetNotificationEndpointsLabelsResult> =>
  request(
    'GET',
    `/api/v2/notificationEndpoints/${params.endpointID}/labels`,
    params,
    options
  ) as Promise<GetNotificationEndpointsLabelsResult>

export interface PostNotificationEndpointsLabelParams {
  endpointID: string

  data: LabelMapping

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostNotificationEndpointsLabelResult =
  | PostNotificationEndpointsLabelCreatedResult
  | PostNotificationEndpointsLabelDefaultResult

interface PostNotificationEndpointsLabelCreatedResult {
  status: 201
  headers: Headers
  data: LabelResponse
}

interface PostNotificationEndpointsLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postNotificationEndpointsLabel = (
  params: PostNotificationEndpointsLabelParams,
  options: RequestOptions = {}
): Promise<PostNotificationEndpointsLabelResult> =>
  request(
    'POST',
    `/api/v2/notificationEndpoints/${params.endpointID}/labels`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostNotificationEndpointsLabelResult>

export interface DeleteNotificationEndpointsLabelParams {
  endpointID: string
  labelID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteNotificationEndpointsLabelResult =
  | DeleteNotificationEndpointsLabelNoContentResult
  | DeleteNotificationEndpointsLabelNotFoundResult
  | DeleteNotificationEndpointsLabelDefaultResult

interface DeleteNotificationEndpointsLabelNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteNotificationEndpointsLabelNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteNotificationEndpointsLabelDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteNotificationEndpointsLabel = (
  params: DeleteNotificationEndpointsLabelParams,
  options: RequestOptions = {}
): Promise<DeleteNotificationEndpointsLabelResult> =>
  request(
    'DELETE',
    `/api/v2/notificationEndpoints/${params.endpointID}/labels/${params.labelID}`,
    params,
    options
  ) as Promise<DeleteNotificationEndpointsLabelResult>
