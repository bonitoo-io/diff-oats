// This file is generated by [oats][0] and should not be edited by hand.
//
// [0]: https://github.com/influxdata/oats

export interface Subscriptions {
  subscriptions?: Subscription[]
}

export interface Subscription {
  id?: string
  name?: string
  description?: string
  protocol?: string
  orgID?: string
  processGroupId?: string
  brokerHost?: string
  brokerPort?: number
  brokerUsername?: string
  topic?: string
  certProvidedAt?: string
  authType?: 'none' | 'user' | 'certificate'
  dataFormat?: string
  jsonMeasurementKey?: {
    path?: string
    name?: string
    type?: string
  }
  jsonFieldKeys?: JsonSpec[]
  jsonTagKeys?: JsonSpec[]
  jsonTimestamp?: {
    path?: string
    name?: string
    type?: string
  }
  stringMeasurement?: {
    pattern?: string
  }
  stringFields?: StringObjectParams[]
  stringTags?: StringObjectParams[]
  stringTimestamp?: {
    pattern?: string
  }
  status?: string
  bucket?: string
  isActive?: boolean
  createdAt?: string
  updatedAt?: string
  tokenID?: string
  token?: string
  timestampPrecision?: string
}

export interface JsonSpec {
  path?: string
  name?: string
  type?: string
}

export interface StringObjectParams {
  pattern?: string
  name?: string
}

export interface Error {
  readonly code:
    | 'internal error'
    | 'not found'
    | 'conflict'
    | 'invalid'
    | 'unprocessable entity'
    | 'empty value'
    | 'unavailable'
    | 'forbidden'
    | 'too many requests'
    | 'unauthorized'
    | 'method not allowed'
    | 'request too large'
    | 'unsupported media type'
  readonly message?: string
  readonly op?: string
  readonly err?: string
}

export interface SubscriptionParams {
  protocol?: string
  name?: string
  description?: string
  orgID?: string
  brokerHost?: string
  brokerPort?: number
  brokerUsername?: string
  brokerPassword?: string
  brokerCACert?: string
  brokerClientCert?: string
  brokerClientKey?: string
  authType?: 'none' | 'user' | 'certificate'
  topic?: string
  dataFormat?: string
  jsonMeasurementKey?: {
    path?: string
    name?: string
    type?: string
  }
  jsonFieldKeys?: JsonSpec[]
  jsonTagKeys?: JsonSpec[]
  jsonTimestamp?: {
    path?: string
    name?: string
    type?: string
  }
  stringMeasurement?: {
    pattern?: string
  }
  stringFields?: StringObjectParams[]
  stringTags?: StringObjectParams[]
  stringTimestamp?: {
    pattern?: string
  }
  bucket?: string
  isActive?: boolean
  timestampPrecision?: string
}

export interface SubscriptionRunStatus {
  isActive?: boolean
}

export interface SubscriptionStatus {
  isActive?: boolean
  processors?: any
  processGroupID?: string
  id: string
}

export interface SubscriptionStatusArray {
  subscriptions?: SubscriptionStatus[]
}

interface RequestOptions {
  signal?: AbortSignal
}

export type RequestHandler = (
  url: string,
  query: string,
  init: RequestInit
) => {url: string; query: string; init: RequestInit}
export type ResponseHandler = (
  status: number,
  headers: Headers,
  data: any
) => {status: number; headers: Headers; data: any}

const RequestContext = function (
  requestHandler: RequestHandler,
  responseHandler: ResponseHandler
) {
  this.requestHandler = requestHandler
  this.responseHandler = responseHandler
}

RequestContext.prototype.request = async function (
  method: string,
  url: string,
  params: any = {},
  options: RequestOptions = {}
): Promise<any> {
  const requestHeaders = new Headers(params.headers)
  const contentType = requestHeaders.get('Content-Type') || ''

  if (params.auth) {
    const credentials = btoa(`${params.auth.username}:${params.auth.password}`)

    requestHeaders.append('Authorization', `Basic ${credentials}`)
  }

  const body =
    params.data && contentType.includes('json')
      ? JSON.stringify(params.data)
      : params.data

  const query = params.query ? `?${new URLSearchParams(params.query)}` : ''

  const {
    url: middlewareUrl,
    query: middlewareQuery,
    init,
  } = this.requestHandler(url, query, {
    method,
    body,
    credentials: 'same-origin',
    signal: options.signal,
    headers: requestHeaders,
  })

  const response = await fetch(`${middlewareUrl}${middlewareQuery}`, init)

  const {status, headers} = response
  const responseContentType = headers.get('Content-Type') || ''

  let data

  if (responseContentType.includes('json')) {
    data = await response.json()
  } else if (responseContentType.includes('octet-stream')) {
    data = await response.blob()
  } else {
    data = await response.text()
  }

  return this.responseHandler(status, headers, data)
}

RequestContext.prototype.setRequestHandler = function (
  requestHandler: RequestHandler
) {
  this.requestHandler = requestHandler
}

RequestContext.prototype.setResponseHandler = function (
  responseHandler: ResponseHandler
) {
  this.responseHandler = responseHandler
}

const rc = new RequestContext(
  (url, query, init) => {
    return {url, query, init}
  },
  (status, headers, data) => {
    return {status, headers, data}
  }
)
const request = rc.request.bind(rc)
const setRequestHandler = rc.setRequestHandler.bind(rc)
const setResponseHandler = rc.setResponseHandler.bind(rc)

export {request, setRequestHandler, setResponseHandler}

export interface GetBrokerSubsParams {}

type GetBrokerSubsResult =
  | GetBrokerSubsOKResult
  | GetBrokerSubsUnauthorizedResult
  | GetBrokerSubsInternalServerErrorResult

interface GetBrokerSubsOKResult {
  status: 200
  headers: Headers
  data: Subscriptions
}

interface GetBrokerSubsUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface GetBrokerSubsInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBrokerSubs = (
  params: GetBrokerSubsParams,
  options: RequestOptions = {}
): Promise<GetBrokerSubsResult> =>
  request(
    'GET',
    '/api/v2private/broker/subs',
    params,
    options
  ) as Promise<GetBrokerSubsResult>

export interface PostBrokerSubParams {
  data: SubscriptionParams
}

type PostBrokerSubResult =
  | PostBrokerSubCreatedResult
  | PostBrokerSubBadRequestResult
  | PostBrokerSubUnauthorizedResult
  | PostBrokerSubInternalServerErrorResult

interface PostBrokerSubCreatedResult {
  status: 201
  headers: Headers
  data: Subscription
}

interface PostBrokerSubBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PostBrokerSubUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PostBrokerSubInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const postBrokerSub = (
  params: PostBrokerSubParams,
  options: RequestOptions = {}
): Promise<PostBrokerSubResult> =>
  request(
    'POST',
    '/api/v2private/broker/subs',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PostBrokerSubResult>

export interface GetBrokerSubParams {
  id: string
}

type GetBrokerSubResult =
  | GetBrokerSubOKResult
  | GetBrokerSubBadRequestResult
  | GetBrokerSubUnauthorizedResult
  | GetBrokerSubInternalServerErrorResult

interface GetBrokerSubOKResult {
  status: 200
  headers: Headers
  data: Subscription
}

interface GetBrokerSubBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetBrokerSubUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface GetBrokerSubInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBrokerSub = (
  params: GetBrokerSubParams,
  options: RequestOptions = {}
): Promise<GetBrokerSubResult> =>
  request(
    'GET',
    `/api/v2private/broker/subs/${params.id}`,
    params,
    options
  ) as Promise<GetBrokerSubResult>

export interface PutBrokerSubParams {
  id: string

  data: SubscriptionParams
}

type PutBrokerSubResult =
  | PutBrokerSubOKResult
  | PutBrokerSubBadRequestResult
  | PutBrokerSubUnauthorizedResult
  | PutBrokerSubInternalServerErrorResult

interface PutBrokerSubOKResult {
  status: 200
  headers: Headers
  data: Subscription
}

interface PutBrokerSubBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PutBrokerSubUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PutBrokerSubInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const putBrokerSub = (
  params: PutBrokerSubParams,
  options: RequestOptions = {}
): Promise<PutBrokerSubResult> =>
  request(
    'PUT',
    `/api/v2private/broker/subs/${params.id}`,
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PutBrokerSubResult>

export interface DeleteBrokerSubParams {
  id: string
}

type DeleteBrokerSubResult =
  | DeleteBrokerSubNoContentResult
  | DeleteBrokerSubBadRequestResult
  | DeleteBrokerSubUnauthorizedResult
  | DeleteBrokerSubNotFoundResult
  | DeleteBrokerSubInternalServerErrorResult

interface DeleteBrokerSubNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteBrokerSubBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface DeleteBrokerSubUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface DeleteBrokerSubNotFoundResult {
  status: 404
  headers: Headers
  data: Error
}

interface DeleteBrokerSubInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteBrokerSub = (
  params: DeleteBrokerSubParams,
  options: RequestOptions = {}
): Promise<DeleteBrokerSubResult> =>
  request(
    'DELETE',
    `/api/v2private/broker/subs/${params.id}`,
    params,
    options
  ) as Promise<DeleteBrokerSubResult>

export interface GetBrokerSubsStatusParams {
  id: string
}

type GetBrokerSubsStatusResult =
  | GetBrokerSubsStatusOKResult
  | GetBrokerSubsStatusBadRequestResult
  | GetBrokerSubsStatusUnauthorizedResult
  | GetBrokerSubsStatusInternalServerErrorResult

interface GetBrokerSubsStatusOKResult {
  status: 200
  headers: Headers
  data: Subscription
}

interface GetBrokerSubsStatusBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface GetBrokerSubsStatusUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface GetBrokerSubsStatusInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBrokerSubsStatus = (
  params: GetBrokerSubsStatusParams,
  options: RequestOptions = {}
): Promise<GetBrokerSubsStatusResult> =>
  request(
    'GET',
    `/api/v2private/broker/subs/${params.id}/status`,
    params,
    options
  ) as Promise<GetBrokerSubsStatusResult>

export interface PutBrokerSubsStatusParams {
  id: string

  data: SubscriptionRunStatus
}

type PutBrokerSubsStatusResult =
  | PutBrokerSubsStatusOKResult
  | PutBrokerSubsStatusBadRequestResult
  | PutBrokerSubsStatusUnauthorizedResult
  | PutBrokerSubsStatusInternalServerErrorResult

interface PutBrokerSubsStatusOKResult {
  status: 200
  headers: Headers
  data: SubscriptionStatus
}

interface PutBrokerSubsStatusBadRequestResult {
  status: 400
  headers: Headers
  data: Error
}

interface PutBrokerSubsStatusUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface PutBrokerSubsStatusInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const putBrokerSubsStatus = (
  params: PutBrokerSubsStatusParams,
  options: RequestOptions = {}
): Promise<PutBrokerSubsStatusResult> =>
  request(
    'PUT',
    `/api/v2private/broker/subs/${params.id}/status`,
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PutBrokerSubsStatusResult>

export interface GetBrokerSubsStatusesParams {}

type GetBrokerSubsStatusesResult =
  | GetBrokerSubsStatusesOKResult
  | GetBrokerSubsStatusesUnauthorizedResult
  | GetBrokerSubsStatusesInternalServerErrorResult

interface GetBrokerSubsStatusesOKResult {
  status: 200
  headers: Headers
  data: SubscriptionStatusArray
}

interface GetBrokerSubsStatusesUnauthorizedResult {
  status: 401
  headers: Headers
  data: Error
}

interface GetBrokerSubsStatusesInternalServerErrorResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBrokerSubsStatuses = (
  params: GetBrokerSubsStatusesParams,
  options: RequestOptions = {}
): Promise<GetBrokerSubsStatusesResult> =>
  request(
    'GET',
    '/api/v2private/broker/subs/statuses',
    params,
    options
  ) as Promise<GetBrokerSubsStatusesResult>
